
temperature.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f3a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002f3a  00002fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002808  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001400  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00007052  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000945d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000be72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 88 16 	call	0x2d10	; 0x2d10 <main>
      7a:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <UART_VidInit>:
#include "../lib/BIT_MATH.h"
#include "../lib/AVR32_REG.h"
#include "UART_Config.h"
#include "UART_Private.h"
 void UART_VidInit(OP_MODE Copy_mode,BAUD Copy_BaudRate)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	28 97       	sbiw	r28, 0x08	; 8
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	8c 83       	std	Y+4, r24	; 0x04
     e34:	4d 83       	std	Y+5, r20	; 0x05
     e36:	5e 83       	std	Y+6, r21	; 0x06
     e38:	6f 83       	std	Y+7, r22	; 0x07
     e3a:	78 87       	std	Y+8, r23	; 0x08
	u8 EMP_Reg;
	u16 Local_UBRR=0;
     e3c:	1a 82       	std	Y+2, r1	; 0x02
     e3e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_mode==ASYNC_NORM_BD){
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	88 23       	and	r24, r24
     e44:	21 f5       	brne	.+72     	; 0xe8e <UART_VidInit+0x70>
		Local_UBRR=(F_CPU/(16*Copy_BaudRate))-1;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	af 81       	ldd	r26, Y+7	; 0x07
     e4c:	b8 85       	ldd	r27, Y+8	; 0x08
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	aa 1f       	adc	r26, r26
     e54:	bb 1f       	adc	r27, r27
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	aa 1f       	adc	r26, r26
     e5c:	bb 1f       	adc	r27, r27
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	aa 1f       	adc	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	aa 1f       	adc	r26, r26
     e6c:	bb 1f       	adc	r27, r27
     e6e:	9c 01       	movw	r18, r24
     e70:	ad 01       	movw	r20, r26
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	92 e1       	ldi	r25, 0x12	; 18
     e76:	aa e7       	ldi	r26, 0x7A	; 122
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
     e82:	da 01       	movw	r26, r20
     e84:	c9 01       	movw	r24, r18
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	3d c0       	rjmp	.+122    	; 0xf08 <UART_VidInit+0xea>
	}
	else if(Copy_mode==ASYNC_DOUBLE_BD){
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	01 f5       	brne	.+64     	; 0xed4 <UART_VidInit+0xb6>
		Local_UBRR=(F_CPU/(8*Copy_BaudRate))-1;
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	af 81       	ldd	r26, Y+7	; 0x07
     e9a:	b8 85       	ldd	r27, Y+8	; 0x08
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	aa 1f       	adc	r26, r26
     ea2:	bb 1f       	adc	r27, r27
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	aa 1f       	adc	r26, r26
     eaa:	bb 1f       	adc	r27, r27
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	9c 01       	movw	r18, r24
     eb6:	ad 01       	movw	r20, r26
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	92 e1       	ldi	r25, 0x12	; 18
     ebc:	aa e7       	ldi	r26, 0x7A	; 122
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
     ec8:	da 01       	movw	r26, r20
     eca:	c9 01       	movw	r24, r18
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	1a c0       	rjmp	.+52     	; 0xf08 <UART_VidInit+0xea>
	}
	else if(Copy_mode==SYNC_MTR){
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	b9 f4       	brne	.+46     	; 0xf08 <UART_VidInit+0xea>
		Local_UBRR=(F_CPU/(2*Copy_BaudRate))-1;
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	af 81       	ldd	r26, Y+7	; 0x07
     ee0:	b8 85       	ldd	r27, Y+8	; 0x08
     ee2:	9c 01       	movw	r18, r24
     ee4:	ad 01       	movw	r20, r26
     ee6:	22 0f       	add	r18, r18
     ee8:	33 1f       	adc	r19, r19
     eea:	44 1f       	adc	r20, r20
     eec:	55 1f       	adc	r21, r21
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	92 e1       	ldi	r25, 0x12	; 18
     ef2:	aa e7       	ldi	r26, 0x7A	; 122
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
     efe:	da 01       	movw	r26, r20
     f00:	c9 01       	movw	r24, r18
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
	}



	/* Set baud rate first 8 bits in UBRRL & the last 4 bits in UBRRH*/
	UBRRH = Local_UBRR>>8;
     f08:	e0 e4       	ldi	r30, 0x40	; 64
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	89 2f       	mov	r24, r25
     f12:	99 27       	eor	r25, r25
     f14:	80 83       	st	Z, r24
	UBRRL = Local_UBRR;
     f16:	e9 e2       	ldi	r30, 0x29	; 41
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	80 83       	st	Z, r24
	/* Enable receiver and transmitter and set char size*/
	//UCSRB = (EN<<RXEN)|(EN<<TXEN)|((CHAR_SiZE>>2)<<UCSZ2);
#if RXC_INT==EN
	SET_BIT(UCSRB,RXCIE);
#elif RXC_INT==DISABLE
	CLR_BIT(UCSRB,RXCIE);
     f1e:	aa e2       	ldi	r26, 0x2A	; 42
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ea e2       	ldi	r30, 0x2A	; 42
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	8c 93       	st	X, r24
#endif
#if TXC_INT==EN
	SET_BIT(UCSRB,TXCIE);
#elif TXC_INT==DISABLE
	CLR_BIT(UCSRB,TXCIE);
     f2c:	aa e2       	ldi	r26, 0x2A	; 42
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ea e2       	ldi	r30, 0x2A	; 42
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8f 7b       	andi	r24, 0xBF	; 191
     f38:	8c 93       	st	X, r24
#endif
#if R_EN==EN
	SET_BIT(UCSRB,RXEN);
     f3a:	aa e2       	ldi	r26, 0x2A	; 42
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e2       	ldi	r30, 0x2A	; 42
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 61       	ori	r24, 0x10	; 16
     f46:	8c 93       	st	X, r24
#elif R_EN==DISABLE
	CLR_BIT(UCSRB,RXEN);
#endif
#if T_EN==EN
	SET_BIT(UCSRB,TXEN);
     f48:	aa e2       	ldi	r26, 0x2A	; 42
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e2       	ldi	r30, 0x2A	; 42
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 60       	ori	r24, 0x08	; 8
     f54:	8c 93       	st	X, r24
#elif T_EN==DISABLE
	CLR_BIT(UCSRB,TXEN);
#endif
	UCSRB|=((CHAR_SiZE>>2)<<UCSZ2);
     f56:	aa e2       	ldi	r26, 0x2A	; 42
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ea e2       	ldi	r30, 0x2A	; 42
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8c 93       	st	X, r24

	/* Set frame format: 8data, 1stop bit,char size */
	//	TO WRITE ON  UCSRC
	SET_BIT(EMP_Reg,URSEL);
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(EMP_Reg,UCPOL);
#elif CLOCK_POL==FALLTX_RISRX
	SET_BIT(EMP_Reg,UCPOL);
#endif
#elif MODE_SELECT==ASYNC
	CLR_BIT(EMP_Reg,UMSEL);
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	8f 7b       	andi	r24, 0xBF	; 191
     f6c:	8b 83       	std	Y+3, r24	; 0x03
	EMP_Reg|=(PARITY_MODE<<UPM0);

#if STOP_BIT==TWO_BIT
	SET_BIT(EMP_Reg,USBS);
#elif STOP_BIT==ONE_BIT
	CLR_BIT(EMP_Reg,USBS);
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	8b 83       	std	Y+3, r24	; 0x03
#endif
	EMP_Reg|=((CHAR_SiZE&SEL2BITS)<<UCSZ0);
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	86 60       	ori	r24, 0x06	; 6
     f78:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC=EMP_Reg;
     f7a:	e0 e4       	ldi	r30, 0x40	; 64
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	80 83       	st	Z, r24
	//UCSRC = (1<<REG_SEL_BIT)|((CHAR_SiZE&3)<<UCSZ0);
}
     f82:	28 96       	adiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <UART_VidSend>:



void UART_VidSend(u16 Copy_U16Data)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <UART_VidSend+0x6>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01

#if CHAR_SiZE==CH_S_9BIT
	UCSRB|=(((Copy_U8Data>>8)&1)<<TXB8);
#endif

	while(!GET_BIT(UCSRA,UDRE));
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	82 95       	swap	r24
     faa:	86 95       	lsr	r24
     fac:	87 70       	andi	r24, 0x07	; 7
     fae:	88 23       	and	r24, r24
     fb0:	c1 f3       	breq	.-16     	; 0xfa2 <UART_VidSend+0xe>
	UDR=(u8)Copy_U16Data;
     fb2:	ec e2       	ldi	r30, 0x2C	; 44
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24

}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <UART_VidReceive>:
u16 UART_VidReceive()
{	u16 Local_U8Value=0;
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <UART_VidReceive+0x6>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	1a 82       	std	Y+2, r1	; 0x02
     fd0:	19 82       	std	Y+1, r1	; 0x01
#if CHAR_SiZE==CH_S_9BIT
Local_U8Value|=(GET_BIT(UCSRB,RXB8)<<8);
#endif
while(!GET_BIT(UCSRA,RXC));
     fd2:	eb e2       	ldi	r30, 0x2B	; 43
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	dc f7       	brge	.-10     	; 0xfd2 <UART_VidReceive+0xe>
Local_U8Value|=UDR;
     fdc:	ec e2       	ldi	r30, 0x2C	; 44
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	82 2b       	or	r24, r18
     fec:	93 2b       	or	r25, r19
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
return Local_U8Value;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <LM35_Init>:
#include "../lib/STD_Types.h"
 #include "../DIO/DIO_Interface.h"
#include "../ADC/ADC_Interface.h"
#include "LM35_Config.h"
void LM35_Init(void)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PortA,DIO_Pin0,Input);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_VidSetPinDirection>
	ADC_VidInit();
    1012:	0e 94 8a 12 	call	0x2514	; 0x2514 <ADC_VidInit>
	ADC_VidSelectChannel(0);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0e 94 d7 12 	call	0x25ae	; 0x25ae <ADC_VidSelectChannel>
	ADC_VidEnable();
    101c:	0e 94 bb 12 	call	0x2576	; 0x2576 <ADC_VidEnable>
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <LM35_VidRead>:

void LM35_VidRead(f32 * Copy_U16Read)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	2c 97       	sbiw	r28, 0x0c	; 12
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	9c 87       	std	Y+12, r25	; 0x0c
    103c:	8b 87       	std	Y+11, r24	; 0x0b
	u16 ADC_Read;
	f32 ADC_StepSize,Analog_Read;
	ADC_Read=ADC_VidRead();
    103e:	0e 94 3a 14 	call	0x2874	; 0x2874 <ADC_VidRead>
    1042:	9a 87       	std	Y+10, r25	; 0x0a
    1044:	89 87       	std	Y+9, r24	; 0x09
	ADC_StepSize=(f32)ADC_REFVCC/ADC_Resolution;
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e4       	ldi	r25, 0x40	; 64
    104a:	ac e1       	ldi	r26, 0x1C	; 28
    104c:	b0 e4       	ldi	r27, 0x40	; 64
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	af 83       	std	Y+7, r26	; 0x07
    1054:	b8 87       	std	Y+8, r27	; 0x08
  	Analog_Read=(f32)ADC_StepSize*(ADC_Read);
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	cc 01       	movw	r24, r24
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	2d 81       	ldd	r18, Y+5	; 0x05
    1072:	3e 81       	ldd	r19, Y+6	; 0x06
    1074:	4f 81       	ldd	r20, Y+7	; 0x07
    1076:	58 85       	ldd	r21, Y+8	; 0x08
    1078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	ab 83       	std	Y+3, r26	; 0x03
    1086:	bc 83       	std	Y+4, r27	; 0x04
 	*Copy_U16Read=ceil(Analog_Read/10 );
    1088:	69 81       	ldd	r22, Y+1	; 0x01
    108a:	7a 81       	ldd	r23, Y+2	; 0x02
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e2       	ldi	r20, 0x20	; 32
    1096:	51 e4       	ldi	r21, 0x41	; 65
    1098:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <ceil>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    10ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    10b0:	80 83       	st	Z, r24
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	a2 83       	std	Z+2, r26	; 0x02
    10b6:	b3 83       	std	Z+3, r27	; 0x03
}
    10b8:	2c 96       	adiw	r28, 0x0c	; 12
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <LCD_VidSendData>:
#include "Lcd_Private.h"
#include "Lcd_Config.h"



void LCD_VidSendData(u8 Copy_U8Data){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(PortC,Rs_Pin,Data);
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	41 e0       	ldi	r20, 0x01	; 1
    10dc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
	LCD_VidLatch(Copy_U8Data);
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	0e 94 89 08 	call	0x1112	; 0x1112 <LCD_VidLatch>
}
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 Copy_U8Command){
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	0f 92       	push	r0
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(PortC,Rs_Pin,Command);
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	62 e0       	ldi	r22, 0x02	; 2
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
	LCD_VidLatch(Copy_U8Command);
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	0e 94 89 08 	call	0x1112	; 0x1112 <LCD_VidLatch>
}
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <LCD_VidLatch>:

static void LCD_VidLatch(u8 Copy_U8SendData){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	6d 97       	sbiw	r28, 0x1d	; 29
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(PortC,Rw_Pin,Write);
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
	DIO_VidSetPortValue(PortD,Copy_U8SendData);
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1136:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_VidSetPortValue>
	DIO_VidSetPinValue(PortC,En_Pin,High);
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e8       	ldi	r26, 0x80	; 128
    114a:	bf e3       	ldi	r27, 0x3F	; 63
    114c:	89 8f       	std	Y+25, r24	; 0x19
    114e:	9a 8f       	std	Y+26, r25	; 0x1a
    1150:	ab 8f       	std	Y+27, r26	; 0x1b
    1152:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	69 8d       	ldd	r22, Y+25	; 0x19
    1156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	4a ef       	ldi	r20, 0xFA	; 250
    1162:	54 e4       	ldi	r21, 0x44	; 68
    1164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8d 8b       	std	Y+21, r24	; 0x15
    116e:	9e 8b       	std	Y+22, r25	; 0x16
    1170:	af 8b       	std	Y+23, r26	; 0x17
    1172:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1174:	6d 89       	ldd	r22, Y+21	; 0x15
    1176:	7e 89       	ldd	r23, Y+22	; 0x16
    1178:	8f 89       	ldd	r24, Y+23	; 0x17
    117a:	98 8d       	ldd	r25, Y+24	; 0x18
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <LCD_VidLatch+0x84>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <LCD_VidLatch+0x102>
	else if (__tmp > 65535)
    1196:	6d 89       	ldd	r22, Y+21	; 0x15
    1198:	7e 89       	ldd	r23, Y+22	; 0x16
    119a:	8f 89       	ldd	r24, Y+23	; 0x17
    119c:	98 8d       	ldd	r25, Y+24	; 0x18
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <LCD_VidLatch+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	69 8d       	ldd	r22, Y+25	; 0x19
    11b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <LCD_VidLatch+0xe4>
    11d8:	88 ec       	ldi	r24, 0xC8	; 200
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9a 8b       	std	Y+18, r25	; 0x12
    11de:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e0:	89 89       	ldd	r24, Y+17	; 0x11
    11e2:	9a 89       	ldd	r25, Y+18	; 0x12
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <LCD_VidLatch+0xd2>
    11e8:	9a 8b       	std	Y+18, r25	; 0x12
    11ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8b 89       	ldd	r24, Y+19	; 0x13
    11ee:	9c 89       	ldd	r25, Y+20	; 0x14
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 8b       	std	Y+20, r25	; 0x14
    11f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8b 89       	ldd	r24, Y+19	; 0x13
    11f8:	9c 89       	ldd	r25, Y+20	; 0x14
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <LCD_VidLatch+0xc6>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <LCD_VidLatch+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6d 89       	ldd	r22, Y+21	; 0x15
    1202:	7e 89       	ldd	r23, Y+22	; 0x16
    1204:	8f 89       	ldd	r24, Y+23	; 0x17
    1206:	98 8d       	ldd	r25, Y+24	; 0x18
    1208:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
    1214:	8b 89       	ldd	r24, Y+19	; 0x13
    1216:	9c 89       	ldd	r25, Y+20	; 0x14
    1218:	98 8b       	std	Y+16, r25	; 0x10
    121a:	8f 87       	std	Y+15, r24	; 0x0f
    121c:	8f 85       	ldd	r24, Y+15	; 0x0f
    121e:	98 89       	ldd	r25, Y+16	; 0x10
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <LCD_VidLatch+0x10e>
    1224:	98 8b       	std	Y+16, r25	; 0x10
    1226:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(PortC,En_Pin,Low);
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a8 e4       	ldi	r26, 0x48	; 72
    1238:	b2 e4       	ldi	r27, 0x42	; 66
    123a:	8b 87       	std	Y+11, r24	; 0x0b
    123c:	9c 87       	std	Y+12, r25	; 0x0c
    123e:	ad 87       	std	Y+13, r26	; 0x0d
    1240:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	4a ef       	ldi	r20, 0xFA	; 250
    1250:	54 e4       	ldi	r21, 0x44	; 68
    1252:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8f 83       	std	Y+7, r24	; 0x07
    125c:	98 87       	std	Y+8, r25	; 0x08
    125e:	a9 87       	std	Y+9, r26	; 0x09
    1260:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1276:	88 23       	and	r24, r24
    1278:	2c f4       	brge	.+10     	; 0x1284 <LCD_VidLatch+0x172>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	3f c0       	rjmp	.+126    	; 0x1302 <LCD_VidLatch+0x1f0>
	else if (__tmp > 65535)
    1284:	6f 81       	ldd	r22, Y+7	; 0x07
    1286:	78 85       	ldd	r23, Y+8	; 0x08
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1298:	18 16       	cp	r1, r24
    129a:	4c f5       	brge	.+82     	; 0x12ee <LCD_VidLatch+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <LCD_VidLatch+0x1d2>
    12c6:	88 ec       	ldi	r24, 0xC8	; 200
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	8b 83       	std	Y+3, r24	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <LCD_VidLatch+0x1c0>
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9e 83       	std	Y+6, r25	; 0x06
    12e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <LCD_VidLatch+0x1b4>
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <LCD_VidLatch+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ee:	6f 81       	ldd	r22, Y+7	; 0x07
    12f0:	78 85       	ldd	r23, Y+8	; 0x08
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <LCD_VidLatch+0x1fc>
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    1316:	6d 96       	adiw	r28, 0x1d	; 29
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <LCD_VidReadData>:

void LCD_VidReadData()
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGoToXY(1,0);//go to DDRAM
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_VidGoToXY>
	DIO_VidSetPinValue(PortC,Rs_Pin,Data);
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PortC,Rw_Pin,Read);
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>


}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <LCD_VIDPrintString>:
void LCD_VIDPrintString(u8 Copy_U8String[]){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <LCD_VIDPrintString+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <LCD_VIDPrintString+0x8>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9c 83       	std	Y+4, r25	; 0x04
    1364:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;Copy_U8String[i]!='\0';i++)
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	19 82       	std	Y+1, r1	; 0x01
    136a:	0f c0       	rjmp	.+30     	; 0x138a <LCD_VIDPrintString+0x34>
	{
		LCD_VidSendData(Copy_U8String[i]);
    136c:	29 81       	ldd	r18, Y+1	; 0x01
    136e:	3a 81       	ldd	r19, Y+2	; 0x02
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	fc 01       	movw	r30, r24
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	80 81       	ld	r24, Z
    137c:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>


}
void LCD_VIDPrintString(u8 Copy_U8String[]){

	for(int i=0;Copy_U8String[i]!='\0';i++)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	29 81       	ldd	r18, Y+1	; 0x01
    138c:	3a 81       	ldd	r19, Y+2	; 0x02
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	fc 01       	movw	r30, r24
    1394:	e2 0f       	add	r30, r18
    1396:	f3 1f       	adc	r31, r19
    1398:	80 81       	ld	r24, Z
    139a:	88 23       	and	r24, r24
    139c:	39 f7       	brne	.-50     	; 0x136c <LCD_VIDPrintString+0x16>
	{
		LCD_VidSendData(Copy_U8String[i]);
	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <LCD_VidInit>:

void LCD_VidInit(){
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	c6 54       	subi	r28, 0x46	; 70
    13ba:	d0 40       	sbci	r29, 0x00	; 0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinDirection(PortC,En_Pin,Output);
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PortC,En_Pin,Low);//to make the pulse from low
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_VidSetPinValue>
	DIO_VidSetPinDirection(PortC,Rw_Pin,Output);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortC,Rs_Pin,Output);
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection(PortD,0xff);
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	6f ef       	ldi	r22, 0xFF	; 255
    13f2:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_VidSetPortDirection>
    13f6:	fe 01       	movw	r30, r28
    13f8:	ed 5b       	subi	r30, 0xBD	; 189
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a8 e4       	ldi	r26, 0x48	; 72
    1402:	b2 e4       	ldi	r27, 0x42	; 66
    1404:	80 83       	st	Z, r24
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	a2 83       	std	Z+2, r26	; 0x02
    140a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	8e 01       	movw	r16, r28
    140e:	01 5c       	subi	r16, 0xC1	; 193
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	fe 01       	movw	r30, r28
    1414:	ed 5b       	subi	r30, 0xBD	; 189
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4a ef       	ldi	r20, 0xFA	; 250
    1426:	54 e4       	ldi	r21, 0x44	; 68
    1428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	f8 01       	movw	r30, r16
    1432:	80 83       	st	Z, r24
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	a2 83       	std	Z+2, r26	; 0x02
    1438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    143a:	fe 01       	movw	r30, r28
    143c:	ff 96       	adiw	r30, 0x3f	; 63
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f e3       	ldi	r21, 0x3F	; 63
    144e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1452:	88 23       	and	r24, r24
    1454:	2c f4       	brge	.+10     	; 0x1460 <LCD_VidInit+0xb4>
		__ticks = 1;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9e af       	std	Y+62, r25	; 0x3e
    145c:	8d af       	std	Y+61, r24	; 0x3d
    145e:	46 c0       	rjmp	.+140    	; 0x14ec <LCD_VidInit+0x140>
	else if (__tmp > 65535)
    1460:	fe 01       	movw	r30, r28
    1462:	ff 96       	adiw	r30, 0x3f	; 63
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	64 f5       	brge	.+88     	; 0x14d4 <LCD_VidInit+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	fe 01       	movw	r30, r28
    147e:	ed 5b       	subi	r30, 0xBD	; 189
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9e af       	std	Y+62, r25	; 0x3e
    14a8:	8d af       	std	Y+61, r24	; 0x3d
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <LCD_VidInit+0x11e>
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c af       	std	Y+60, r25	; 0x3c
    14b2:	8b af       	std	Y+59, r24	; 0x3b
    14b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    14b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <LCD_VidInit+0x10c>
    14bc:	9c af       	std	Y+60, r25	; 0x3c
    14be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    14c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9e af       	std	Y+62, r25	; 0x3e
    14c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    14cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <LCD_VidInit+0x100>
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <LCD_VidInit+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	fe 01       	movw	r30, r28
    14d6:	ff 96       	adiw	r30, 0x3f	; 63
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e af       	std	Y+62, r25	; 0x3e
    14ea:	8d af       	std	Y+61, r24	; 0x3d
    14ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    14f0:	9a af       	std	Y+58, r25	; 0x3a
    14f2:	89 af       	std	Y+57, r24	; 0x39
    14f4:	89 ad       	ldd	r24, Y+57	; 0x39
    14f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <LCD_VidInit+0x14c>
    14fc:	9a af       	std	Y+58, r25	; 0x3a
    14fe:	89 af       	std	Y+57, r24	; 0x39

#if LCD_Mode==Eight_Bit
	_delay_ms(50);
	LCD_VidSendCommand(LCD_8BSetFunc);
    1500:	88 e3       	ldi	r24, 0x38	; 56
    1502:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e8       	ldi	r26, 0x80	; 128
    150c:	bf e3       	ldi	r27, 0x3F	; 63
    150e:	8d ab       	std	Y+53, r24	; 0x35
    1510:	9e ab       	std	Y+54, r25	; 0x36
    1512:	af ab       	std	Y+55, r26	; 0x37
    1514:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6d a9       	ldd	r22, Y+53	; 0x35
    1518:	7e a9       	ldd	r23, Y+54	; 0x36
    151a:	8f a9       	ldd	r24, Y+55	; 0x37
    151c:	98 ad       	ldd	r25, Y+56	; 0x38
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a ef       	ldi	r20, 0xFA	; 250
    1524:	54 e4       	ldi	r21, 0x44	; 68
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	89 ab       	std	Y+49, r24	; 0x31
    1530:	9a ab       	std	Y+50, r25	; 0x32
    1532:	ab ab       	std	Y+51, r26	; 0x33
    1534:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1536:	69 a9       	ldd	r22, Y+49	; 0x31
    1538:	7a a9       	ldd	r23, Y+50	; 0x32
    153a:	8b a9       	ldd	r24, Y+51	; 0x33
    153c:	9c a9       	ldd	r25, Y+52	; 0x34
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <LCD_VidInit+0x1ac>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	98 ab       	std	Y+48, r25	; 0x30
    1554:	8f a7       	std	Y+47, r24	; 0x2f
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <LCD_VidInit+0x22a>
	else if (__tmp > 65535)
    1558:	69 a9       	ldd	r22, Y+49	; 0x31
    155a:	7a a9       	ldd	r23, Y+50	; 0x32
    155c:	8b a9       	ldd	r24, Y+51	; 0x33
    155e:	9c a9       	ldd	r25, Y+52	; 0x34
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <LCD_VidInit+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6d a9       	ldd	r22, Y+53	; 0x35
    1572:	7e a9       	ldd	r23, Y+54	; 0x36
    1574:	8f a9       	ldd	r24, Y+55	; 0x37
    1576:	98 ad       	ldd	r25, Y+56	; 0x38
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	98 ab       	std	Y+48, r25	; 0x30
    1596:	8f a7       	std	Y+47, r24	; 0x2f
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <LCD_VidInit+0x20c>
    159a:	88 ec       	ldi	r24, 0xC8	; 200
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9e a7       	std	Y+46, r25	; 0x2e
    15a0:	8d a7       	std	Y+45, r24	; 0x2d
    15a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <LCD_VidInit+0x1fa>
    15aa:	9e a7       	std	Y+46, r25	; 0x2e
    15ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b0:	98 a9       	ldd	r25, Y+48	; 0x30
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	98 ab       	std	Y+48, r25	; 0x30
    15b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ba:	98 a9       	ldd	r25, Y+48	; 0x30
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <LCD_VidInit+0x1ee>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <LCD_VidInit+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	69 a9       	ldd	r22, Y+49	; 0x31
    15c4:	7a a9       	ldd	r23, Y+50	; 0x32
    15c6:	8b a9       	ldd	r24, Y+51	; 0x33
    15c8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	98 ab       	std	Y+48, r25	; 0x30
    15d4:	8f a7       	std	Y+47, r24	; 0x2f
    15d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d8:	98 a9       	ldd	r25, Y+48	; 0x30
    15da:	9c a7       	std	Y+44, r25	; 0x2c
    15dc:	8b a7       	std	Y+43, r24	; 0x2b
    15de:	8b a5       	ldd	r24, Y+43	; 0x2b
    15e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <LCD_VidInit+0x236>
    15e6:	9c a7       	std	Y+44, r25	; 0x2c
    15e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_VidSendCommand(LCD_8BDisplayControl);
    15ea:	8e e0       	ldi	r24, 0x0E	; 14
    15ec:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e8       	ldi	r26, 0x80	; 128
    15f6:	bf e3       	ldi	r27, 0x3F	; 63
    15f8:	8f a3       	std	Y+39, r24	; 0x27
    15fa:	98 a7       	std	Y+40, r25	; 0x28
    15fc:	a9 a7       	std	Y+41, r26	; 0x29
    15fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	6f a1       	ldd	r22, Y+39	; 0x27
    1602:	78 a5       	ldd	r23, Y+40	; 0x28
    1604:	89 a5       	ldd	r24, Y+41	; 0x29
    1606:	9a a5       	ldd	r25, Y+42	; 0x2a
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8b a3       	std	Y+35, r24	; 0x23
    161a:	9c a3       	std	Y+36, r25	; 0x24
    161c:	ad a3       	std	Y+37, r26	; 0x25
    161e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1620:	6b a1       	ldd	r22, Y+35	; 0x23
    1622:	7c a1       	ldd	r23, Y+36	; 0x24
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <LCD_VidInit+0x296>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9a a3       	std	Y+34, r25	; 0x22
    163e:	89 a3       	std	Y+33, r24	; 0x21
    1640:	3f c0       	rjmp	.+126    	; 0x16c0 <LCD_VidInit+0x314>
	else if (__tmp > 65535)
    1642:	6b a1       	ldd	r22, Y+35	; 0x23
    1644:	7c a1       	ldd	r23, Y+36	; 0x24
    1646:	8d a1       	ldd	r24, Y+37	; 0x25
    1648:	9e a1       	ldd	r25, Y+38	; 0x26
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	4c f5       	brge	.+82     	; 0x16ac <LCD_VidInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	6f a1       	ldd	r22, Y+39	; 0x27
    165c:	78 a5       	ldd	r23, Y+40	; 0x28
    165e:	89 a5       	ldd	r24, Y+41	; 0x29
    1660:	9a a5       	ldd	r25, Y+42	; 0x2a
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9a a3       	std	Y+34, r25	; 0x22
    1680:	89 a3       	std	Y+33, r24	; 0x21
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <LCD_VidInit+0x2f6>
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	98 a3       	std	Y+32, r25	; 0x20
    168a:	8f 8f       	std	Y+31, r24	; 0x1f
    168c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    168e:	98 a1       	ldd	r25, Y+32	; 0x20
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <LCD_VidInit+0x2e4>
    1694:	98 a3       	std	Y+32, r25	; 0x20
    1696:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	89 a1       	ldd	r24, Y+33	; 0x21
    169a:	9a a1       	ldd	r25, Y+34	; 0x22
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9a a3       	std	Y+34, r25	; 0x22
    16a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	89 a1       	ldd	r24, Y+33	; 0x21
    16a4:	9a a1       	ldd	r25, Y+34	; 0x22
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f7       	brne	.-38     	; 0x1684 <LCD_VidInit+0x2d8>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <LCD_VidInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6b a1       	ldd	r22, Y+35	; 0x23
    16ae:	7c a1       	ldd	r23, Y+36	; 0x24
    16b0:	8d a1       	ldd	r24, Y+37	; 0x25
    16b2:	9e a1       	ldd	r25, Y+38	; 0x26
    16b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9a a3       	std	Y+34, r25	; 0x22
    16be:	89 a3       	std	Y+33, r24	; 0x21
    16c0:	89 a1       	ldd	r24, Y+33	; 0x21
    16c2:	9a a1       	ldd	r25, Y+34	; 0x22
    16c4:	9e 8f       	std	Y+30, r25	; 0x1e
    16c6:	8d 8f       	std	Y+29, r24	; 0x1d
    16c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_VidInit+0x320>
    16d0:	9e 8f       	std	Y+30, r25	; 0x1e
    16d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCommand(LCD_8BDisplayClear);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e4       	ldi	r27, 0x40	; 64
    16e2:	89 8f       	std	Y+25, r24	; 0x19
    16e4:	9a 8f       	std	Y+26, r25	; 0x1a
    16e6:	ab 8f       	std	Y+27, r26	; 0x1b
    16e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	69 8d       	ldd	r22, Y+25	; 0x19
    16ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8d 8b       	std	Y+21, r24	; 0x15
    1704:	9e 8b       	std	Y+22, r25	; 0x16
    1706:	af 8b       	std	Y+23, r26	; 0x17
    1708:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    170a:	6d 89       	ldd	r22, Y+21	; 0x15
    170c:	7e 89       	ldd	r23, Y+22	; 0x16
    170e:	8f 89       	ldd	r24, Y+23	; 0x17
    1710:	98 8d       	ldd	r25, Y+24	; 0x18
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_VidInit+0x380>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <LCD_VidInit+0x3fe>
	else if (__tmp > 65535)
    172c:	6d 89       	ldd	r22, Y+21	; 0x15
    172e:	7e 89       	ldd	r23, Y+22	; 0x16
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	98 8d       	ldd	r25, Y+24	; 0x18
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <LCD_VidInit+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	69 8d       	ldd	r22, Y+25	; 0x19
    1746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    174a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
    176c:	0f c0       	rjmp	.+30     	; 0x178c <LCD_VidInit+0x3e0>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9a 8b       	std	Y+18, r25	; 0x12
    1774:	89 8b       	std	Y+17, r24	; 0x11
    1776:	89 89       	ldd	r24, Y+17	; 0x11
    1778:	9a 89       	ldd	r25, Y+18	; 0x12
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_VidInit+0x3ce>
    177e:	9a 8b       	std	Y+18, r25	; 0x12
    1780:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8b 89       	ldd	r24, Y+19	; 0x13
    1784:	9c 89       	ldd	r25, Y+20	; 0x14
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9c 8b       	std	Y+20, r25	; 0x14
    178a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8b 89       	ldd	r24, Y+19	; 0x13
    178e:	9c 89       	ldd	r25, Y+20	; 0x14
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <LCD_VidInit+0x3c2>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <LCD_VidInit+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6d 89       	ldd	r22, Y+21	; 0x15
    1798:	7e 89       	ldd	r23, Y+22	; 0x16
    179a:	8f 89       	ldd	r24, Y+23	; 0x17
    179c:	98 8d       	ldd	r25, Y+24	; 0x18
    179e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9c 8b       	std	Y+20, r25	; 0x14
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	98 8b       	std	Y+16, r25	; 0x10
    17b0:	8f 87       	std	Y+15, r24	; 0x0f
    17b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b4:	98 89       	ldd	r25, Y+16	; 0x10
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_VidInit+0x40a>
    17ba:	98 8b       	std	Y+16, r25	; 0x10
    17bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(LCD_8BModeSet);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e4       	ldi	r27, 0x40	; 64
    17cc:	8b 87       	std	Y+11, r24	; 0x0b
    17ce:	9c 87       	std	Y+12, r25	; 0x0c
    17d0:	ad 87       	std	Y+13, r26	; 0x0d
    17d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17da:	9e 85       	ldd	r25, Y+14	; 0x0e
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a ef       	ldi	r20, 0xFA	; 250
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8f 83       	std	Y+7, r24	; 0x07
    17ee:	98 87       	std	Y+8, r25	; 0x08
    17f0:	a9 87       	std	Y+9, r26	; 0x09
    17f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f4:	6f 81       	ldd	r22, Y+7	; 0x07
    17f6:	78 85       	ldd	r23, Y+8	; 0x08
    17f8:	89 85       	ldd	r24, Y+9	; 0x09
    17fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <LCD_VidInit+0x46a>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <LCD_VidInit+0x4e8>
	else if (__tmp > 65535)
    1816:	6f 81       	ldd	r22, Y+7	; 0x07
    1818:	78 85       	ldd	r23, Y+8	; 0x08
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	9a 85       	ldd	r25, Y+10	; 0x0a
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <LCD_VidInit+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <LCD_VidInit+0x4ca>
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_VidInit+0x4b8>
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <LCD_VidInit+0x4ac>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <LCD_VidInit+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_VidInit+0x4f4>
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommand(0x70);

#else
#error "wrong mode"
#endif
}
    18a8:	ca 5b       	subi	r28, 0xBA	; 186
    18aa:	df 4f       	sbci	r29, 0xFF	; 255
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <LCD_VidGoToXY>:

void LCD_VidGoToXY(u8 Copy_U8Row,u8 Copy_U8col ){
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <LCD_VidGoToXY+0x6>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_U8Row==0)
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	88 23       	and	r24, r24
    18d2:	29 f4       	brne	.+10     	; 0x18de <LCD_VidGoToXY+0x1e>
	{
		LCD_VidSendCommand(128+Copy_U8col);
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 58       	subi	r24, 0x80	; 128
    18d8:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <LCD_VidGoToXY+0x2c>
	}
	else if(Copy_U8Row==1)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	21 f4       	brne	.+8      	; 0x18ec <LCD_VidGoToXY+0x2c>
	{
		LCD_VidSendCommand(128+64+Copy_U8col);
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 54       	subi	r24, 0x40	; 64
    18e8:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
	}	}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <LCD_VidDraw>:


void LCD_VidDraw(u8* Copy_U8Draw , u8 Copy_U8Size ){
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	27 97       	sbiw	r28, 0x07	; 7
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
    190e:	6f 83       	std	Y+7, r22	; 0x07

	LCD_VidSendCommand(CGRAM_ADDRESS);//set CGRAM address
    1910:	80 e4       	ldi	r24, 0x40	; 64
    1912:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>

	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size*8;Local_U8Iterator++){
    1916:	1c 82       	std	Y+4, r1	; 0x04
    1918:	1b 82       	std	Y+3, r1	; 0x03
    191a:	0f c0       	rjmp	.+30     	; 0x193a <LCD_VidDraw+0x44>
		LCD_VidSendData(Copy_U8Draw[Local_U8Iterator]);
    191c:	2b 81       	ldd	r18, Y+3	; 0x03
    191e:	3c 81       	ldd	r19, Y+4	; 0x04
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	fc 01       	movw	r30, r24
    1926:	e2 0f       	add	r30, r18
    1928:	f3 1f       	adc	r31, r19
    192a:	80 81       	ld	r24, Z
    192c:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>

void LCD_VidDraw(u8* Copy_U8Draw , u8 Copy_U8Size ){

	LCD_VidSendCommand(CGRAM_ADDRESS);//set CGRAM address

	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size*8;Local_U8Iterator++){
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	8f 81       	ldd	r24, Y+7	; 0x07
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9c 01       	movw	r18, r24
    1942:	22 0f       	add	r18, r18
    1944:	33 1f       	adc	r19, r19
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	82 17       	cp	r24, r18
    1954:	93 07       	cpc	r25, r19
    1956:	14 f3       	brlt	.-60     	; 0x191c <LCD_VidDraw+0x26>
		LCD_VidSendData(Copy_U8Draw[Local_U8Iterator]);
	}

	LCD_VidSendCommand(0x04);//set entry mode
    1958:	84 e0       	ldi	r24, 0x04	; 4
    195a:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
 	LCD_VidGoToXY(POS_X,POS_Y);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	63 e0       	ldi	r22, 0x03	; 3
    1962:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_VidGoToXY>
	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    1966:	1a 82       	std	Y+2, r1	; 0x02
    1968:	19 82       	std	Y+1, r1	; 0x01
    196a:	08 c0       	rjmp	.+16     	; 0x197c <LCD_VidDraw+0x86>
		LCD_VidSendData(Local_U8Iterator);
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>
		LCD_VidSendData(Copy_U8Draw[Local_U8Iterator]);
	}

	LCD_VidSendCommand(0x04);//set entry mode
 	LCD_VidGoToXY(POS_X,POS_Y);
	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	8f 81       	ldd	r24, Y+7	; 0x07
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	82 17       	cp	r24, r18
    1988:	93 07       	cpc	r25, r19
    198a:	84 f3       	brlt	.-32     	; 0x196c <LCD_VidDraw+0x76>
		LCD_VidSendData(Local_U8Iterator);
	}
}
    198c:	27 96       	adiw	r28, 0x07	; 7
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <LCD_VidClearDisplay>:

void LCD_VidClearDisplay()
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_8BDisplayClear);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <LCD_VidMovingDraw>:

void LCD_VidMovingDraw(u8* Copy_U8Draw, u8 Copy_U8Size ){
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	65 97       	sbiw	r28, 0x15	; 21
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	9c 8b       	std	Y+20, r25	; 0x14
    19c8:	8b 8b       	std	Y+19, r24	; 0x13
    19ca:	6d 8b       	std	Y+21, r22	; 0x15
	//LCD_VidSendCommand(LCD_8BDisplayClear);
	u8 i=0,j=0;
    19cc:	1a 8a       	std	Y+18, r1	; 0x12
    19ce:	19 8a       	std	Y+17, r1	; 0x11
    19d0:	a2 c0       	rjmp	.+324    	; 0x1b16 <LCD_VidMovingDraw+0x164>
	//LCD_VidSendCommand(0x04+decrease);
	while(j<2){
	while(i+POS_Y<16){
		LCD_VidSendCommand(LCD_8BDisplayClear);
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_VidSendCommand>
		LCD_VidGoToXY(POS_X+j,POS_Y+i);
    19d8:	8a 89       	ldd	r24, Y+18	; 0x12
    19da:	98 2f       	mov	r25, r24
    19dc:	9d 5f       	subi	r25, 0xFD	; 253
    19de:	89 89       	ldd	r24, Y+17	; 0x11
    19e0:	69 2f       	mov	r22, r25
    19e2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_VidGoToXY>
		i+=Copy_U8Size;
    19e6:	9a 89       	ldd	r25, Y+18	; 0x12
    19e8:	8d 89       	ldd	r24, Y+21	; 0x15
    19ea:	89 0f       	add	r24, r25
    19ec:	8a 8b       	std	Y+18, r24	; 0x12
		for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    19ee:	18 8a       	std	Y+16, r1	; 0x10
    19f0:	1f 86       	std	Y+15, r1	; 0x0f
    19f2:	0b c0       	rjmp	.+22     	; 0x1a0a <LCD_VidMovingDraw+0x58>
				LCD_VidSendData(Copy_U8Size-1-Local_U8Iterator);
    19f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    19f6:	8d 89       	ldd	r24, Y+21	; 0x15
    19f8:	89 1b       	sub	r24, r25
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>
	while(j<2){
	while(i+POS_Y<16){
		LCD_VidSendCommand(LCD_8BDisplayClear);
		LCD_VidGoToXY(POS_X+j,POS_Y+i);
		i+=Copy_U8Size;
		for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	98 89       	ldd	r25, Y+16	; 0x10
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	98 8b       	std	Y+16, r25	; 0x10
    1a08:	8f 87       	std	Y+15, r24	; 0x0f
    1a0a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a12:	98 89       	ldd	r25, Y+16	; 0x10
    1a14:	82 17       	cp	r24, r18
    1a16:	93 07       	cpc	r25, r19
    1a18:	6c f3       	brlt	.-38     	; 0x19f4 <LCD_VidMovingDraw+0x42>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e8       	ldi	r25, 0x80	; 128
    1a1e:	ab e3       	ldi	r26, 0x3B	; 59
    1a20:	b5 e4       	ldi	r27, 0x45	; 69
    1a22:	8b 87       	std	Y+11, r24	; 0x0b
    1a24:	9c 87       	std	Y+12, r25	; 0x0c
    1a26:	ad 87       	std	Y+13, r26	; 0x0d
    1a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8f 83       	std	Y+7, r24	; 0x07
    1a44:	98 87       	std	Y+8, r25	; 0x08
    1a46:	a9 87       	std	Y+9, r26	; 0x09
    1a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <LCD_VidMovingDraw+0xba>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <LCD_VidMovingDraw+0x138>
	else if (__tmp > 65535)
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <LCD_VidMovingDraw+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <LCD_VidMovingDraw+0x11a>
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_VidMovingDraw+0x108>
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <LCD_VidMovingDraw+0xfc>
    1ad4:	14 c0       	rjmp	.+40     	; 0x1afe <LCD_VidMovingDraw+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_VidMovingDraw+0x144>
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidMovingDraw(u8* Copy_U8Draw, u8 Copy_U8Size ){
	//LCD_VidSendCommand(LCD_8BDisplayClear);
	u8 i=0,j=0;
	//LCD_VidSendCommand(0x04+decrease);
	while(j<2){
	while(i+POS_Y<16){
    1afe:	8a 89       	ldd	r24, Y+18	; 0x12
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	03 96       	adiw	r24, 0x03	; 3
    1b06:	80 31       	cpi	r24, 0x10	; 16
    1b08:	91 05       	cpc	r25, r1
    1b0a:	0c f4       	brge	.+2      	; 0x1b0e <LCD_VidMovingDraw+0x15c>
    1b0c:	62 cf       	rjmp	.-316    	; 0x19d2 <LCD_VidMovingDraw+0x20>
		for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
				LCD_VidSendData(Copy_U8Size-1-Local_U8Iterator);
			}
		_delay_ms(3000);
	}
	j++;
    1b0e:	89 89       	ldd	r24, Y+17	; 0x11
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	89 8b       	std	Y+17, r24	; 0x11
	i=0;}
    1b14:	1a 8a       	std	Y+18, r1	; 0x12

void LCD_VidMovingDraw(u8* Copy_U8Draw, u8 Copy_U8Size ){
	//LCD_VidSendCommand(LCD_8BDisplayClear);
	u8 i=0,j=0;
	//LCD_VidSendCommand(0x04+decrease);
	while(j<2){
    1b16:	89 89       	ldd	r24, Y+17	; 0x11
    1b18:	82 30       	cpi	r24, 0x02	; 2
    1b1a:	88 f3       	brcs	.-30     	; 0x1afe <LCD_VidMovingDraw+0x14c>
			}
		_delay_ms(3000);
	}
	j++;
	i=0;}
}
    1b1c:	65 96       	adiw	r28, 0x15	; 21
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <LCD_VidPrintIntNumber>:
void LCD_VidPrintIntNumber(u32 Copy_U32Number){
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	2d 97       	sbiw	r28, 0x0d	; 13
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	6a 87       	std	Y+10, r22	; 0x0a
    1b4c:	7b 87       	std	Y+11, r23	; 0x0b
    1b4e:	8c 87       	std	Y+12, r24	; 0x0c
    1b50:	9d 87       	std	Y+13, r25	; 0x0d
	u8 Local_U8Digit;
	u32 Local_U32Reminder=Copy_U32Number,Local_U32Reverse=0;
    1b52:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b54:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b56:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b58:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	af 83       	std	Y+7, r26	; 0x07
    1b60:	b8 87       	std	Y+8, r27	; 0x08
    1b62:	19 82       	std	Y+1, r1	; 0x01
    1b64:	1a 82       	std	Y+2, r1	; 0x02
    1b66:	1b 82       	std	Y+3, r1	; 0x03
    1b68:	1c 82       	std	Y+4, r1	; 0x04
	for(Local_U8Digit=0;Local_U32Reminder;Local_U8Digit++){
    1b6a:	19 86       	std	Y+9, r1	; 0x09
    1b6c:	39 c0       	rjmp	.+114    	; 0x1be0 <LCD_VidPrintIntNumber+0xb2>
		Local_U32Reverse=(Local_U32Reverse*10)+(Local_U32Reminder%10);
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	ab 81       	ldd	r26, Y+3	; 0x03
    1b74:	bc 81       	ldd	r27, Y+4	; 0x04
    1b76:	2a e0       	ldi	r18, 0x0A	; 10
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__mulsi3>
    1b86:	7b 01       	movw	r14, r22
    1b88:	8c 01       	movw	r16, r24
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	af 81       	ldd	r26, Y+7	; 0x07
    1b90:	b8 85       	ldd	r27, Y+8	; 0x08
    1b92:	2a e0       	ldi	r18, 0x0A	; 10
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8e 0d       	add	r24, r14
    1ba8:	9f 1d       	adc	r25, r15
    1baa:	a0 1f       	adc	r26, r16
    1bac:	b1 1f       	adc	r27, r17
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	ab 83       	std	Y+3, r26	; 0x03
    1bb4:	bc 83       	std	Y+4, r27	; 0x04
		Local_U32Reminder/=10;}
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	af 81       	ldd	r26, Y+7	; 0x07
    1bbc:	b8 85       	ldd	r27, Y+8	; 0x08
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
    1bce:	da 01       	movw	r26, r20
    1bd0:	c9 01       	movw	r24, r18
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	af 83       	std	Y+7, r26	; 0x07
    1bd8:	b8 87       	std	Y+8, r27	; 0x08
	i=0;}
}
void LCD_VidPrintIntNumber(u32 Copy_U32Number){
	u8 Local_U8Digit;
	u32 Local_U32Reminder=Copy_U32Number,Local_U32Reverse=0;
	for(Local_U8Digit=0;Local_U32Reminder;Local_U8Digit++){
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	89 87       	std	Y+9, r24	; 0x09
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	af 81       	ldd	r26, Y+7	; 0x07
    1be6:	b8 85       	ldd	r27, Y+8	; 0x08
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	a1 05       	cpc	r26, r1
    1bec:	b1 05       	cpc	r27, r1
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <LCD_VidPrintIntNumber+0xc4>
    1bf0:	be cf       	rjmp	.-132    	; 0x1b6e <LCD_VidPrintIntNumber+0x40>
		Local_U32Reverse=(Local_U32Reverse*10)+(Local_U32Reminder%10);
		Local_U32Reminder/=10;}
	for(Local_U8Digit=0;Local_U32Reverse;Local_U8Digit++){
    1bf2:	19 86       	std	Y+9, r1	; 0x09
    1bf4:	26 c0       	rjmp	.+76     	; 0x1c42 <LCD_VidPrintIntNumber+0x114>
		LCD_VidSendData(Ascii_Zero+(Local_U32Reverse%10));
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	ab 81       	ldd	r26, Y+3	; 0x03
    1bfc:	bc 81       	ldd	r27, Y+4	; 0x04
    1bfe:	2a e0       	ldi	r18, 0x0A	; 10
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	80 5d       	subi	r24, 0xD0	; 208
    1c14:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>
		Local_U32Reverse/=10;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c1e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c20:	2a e0       	ldi	r18, 0x0A	; 10
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
    1c30:	da 01       	movw	r26, r20
    1c32:	c9 01       	movw	r24, r18
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	ab 83       	std	Y+3, r26	; 0x03
    1c3a:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_U8Digit;
	u32 Local_U32Reminder=Copy_U32Number,Local_U32Reverse=0;
	for(Local_U8Digit=0;Local_U32Reminder;Local_U8Digit++){
		Local_U32Reverse=(Local_U32Reverse*10)+(Local_U32Reminder%10);
		Local_U32Reminder/=10;}
	for(Local_U8Digit=0;Local_U32Reverse;Local_U8Digit++){
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	89 87       	std	Y+9, r24	; 0x09
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	ab 81       	ldd	r26, Y+3	; 0x03
    1c48:	bc 81       	ldd	r27, Y+4	; 0x04
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	a1 05       	cpc	r26, r1
    1c4e:	b1 05       	cpc	r27, r1
    1c50:	91 f6       	brne	.-92     	; 0x1bf6 <LCD_VidPrintIntNumber+0xc8>
		LCD_VidSendData(Ascii_Zero+(Local_U32Reverse%10));
		Local_U32Reverse/=10;
	}}
    1c52:	2d 96       	adiw	r28, 0x0d	; 13
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	08 95       	ret

00001c6c <LCD_VidPrintFloatNumber>:

void LCD_VidPrintFloatNumber(f32 Copy_U32FNumber){
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	2c 97       	sbiw	r28, 0x0c	; 12
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	69 87       	std	Y+9, r22	; 0x09
    1c82:	7a 87       	std	Y+10, r23	; 0x0a
    1c84:	8b 87       	std	Y+11, r24	; 0x0b
    1c86:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32IntNum=(u32)Copy_U32FNumber;
    1c88:	69 85       	ldd	r22, Y+9	; 0x09
    1c8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	af 83       	std	Y+7, r26	; 0x07
    1c9e:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32FractionalNum=(Copy_U32FNumber-Local_U32IntNum)*10000;//to get five numbers after point
    1ca0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca6:	98 85       	ldd	r25, Y+8	; 0x08
    1ca8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1cac:	9b 01       	movw	r18, r22
    1cae:	ac 01       	movw	r20, r24
    1cb0:	69 85       	ldd	r22, Y+9	; 0x09
    1cb2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cb8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e4       	ldi	r19, 0x40	; 64
    1cc8:	4c e1       	ldi	r20, 0x1C	; 28
    1cca:	56 e4       	ldi	r21, 0x46	; 70
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	ab 83       	std	Y+3, r26	; 0x03
    1ce6:	bc 83       	std	Y+4, r27	; 0x04
	LCD_VidPrintIntNumber(Local_U32IntNum);
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	af 81       	ldd	r26, Y+7	; 0x07
    1cee:	b8 85       	ldd	r27, Y+8	; 0x08
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_VidPrintIntNumber>
	LCD_VidSendData('.');
    1cf8:	8e e2       	ldi	r24, 0x2E	; 46
    1cfa:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>
	LCD_VidPrintIntNumber(Local_U32FractionalNum);
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	ab 81       	ldd	r26, Y+3	; 0x03
    1d04:	bc 81       	ldd	r27, Y+4	; 0x04
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_VidPrintIntNumber>
}
    1d0e:	2c 96       	adiw	r28, 0x0c	; 12
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <DIO_VidSetPinDirection>:
		error=ES_OK;
		return error;
}
*/
void DIO_VidSetPinDirection(u8 Copy_U8port,u8 Copy_U8Pin,u8 Copy_U8Direction)
{	ErrorState error=ES_NOK;
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	28 97       	sbiw	r28, 0x08	; 8
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	6b 83       	std	Y+3, r22	; 0x03
    1d38:	4c 83       	std	Y+4, r20	; 0x04
    1d3a:	19 82       	std	Y+1, r1	; 0x01
	/*check if dir is output*/
	if(Output == Copy_U8Direction)
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <DIO_VidSetPinDirection+0x24>
    1d42:	71 c0       	rjmp	.+226    	; 0x1e26 <DIO_VidSetPinDirection+0x106>
	{	error=ES_OK;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_U8port)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	38 87       	std	Y+8, r19	; 0x08
    1d50:	2f 83       	std	Y+7, r18	; 0x07
    1d52:	8f 81       	ldd	r24, Y+7	; 0x07
    1d54:	98 85       	ldd	r25, Y+8	; 0x08
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	49 f1       	breq	.+82     	; 0x1dae <DIO_VidSetPinDirection+0x8e>
    1d5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d5e:	38 85       	ldd	r19, Y+8	; 0x08
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <DIO_VidSetPinDirection+0x50>
    1d66:	8f 81       	ldd	r24, Y+7	; 0x07
    1d68:	98 85       	ldd	r25, Y+8	; 0x08
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <DIO_VidSetPinDirection+0x66>
    1d6e:	d4 c0       	rjmp	.+424    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
    1d70:	2f 81       	ldd	r18, Y+7	; 0x07
    1d72:	38 85       	ldd	r19, Y+8	; 0x08
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	71 f1       	breq	.+92     	; 0x1dd6 <DIO_VidSetPinDirection+0xb6>
    1d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d7c:	98 85       	ldd	r25, Y+8	; 0x08
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	91 05       	cpc	r25, r1
    1d82:	e9 f1       	breq	.+122    	; 0x1dfe <DIO_VidSetPinDirection+0xde>
    1d84:	c9 c0       	rjmp	.+402    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		{
		case PortA :	SET_BIT(DDRA,Copy_U8Pin);	break;
    1d86:	aa e3       	ldi	r26, 0x3A	; 58
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ea e3       	ldi	r30, 0x3A	; 58
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <DIO_VidSetPinDirection+0x84>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <DIO_VidSetPinDirection+0x80>
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	b5 c0       	rjmp	.+362    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		case PortB :	SET_BIT(DDRB,Copy_U8Pin);	break;
    1dae:	a7 e3       	ldi	r26, 0x37	; 55
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e7 e3       	ldi	r30, 0x37	; 55
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_VidSetPinDirection+0xac>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <DIO_VidSetPinDirection+0xa8>
    1dd0:	84 2b       	or	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	a1 c0       	rjmp	.+322    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		case PortC :	SET_BIT(DDRC,Copy_U8Pin);	break;
    1dd6:	a4 e3       	ldi	r26, 0x34	; 52
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e4 e3       	ldi	r30, 0x34	; 52
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <DIO_VidSetPinDirection+0xd4>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <DIO_VidSetPinDirection+0xd0>
    1df8:	84 2b       	or	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	8d c0       	rjmp	.+282    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		case PortD :	SET_BIT(DDRD,Copy_U8Pin);	break;
    1dfe:	a1 e3       	ldi	r26, 0x31	; 49
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e1 e3       	ldi	r30, 0x31	; 49
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <DIO_VidSetPinDirection+0xfc>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <DIO_VidSetPinDirection+0xf8>
    1e20:	84 2b       	or	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	79 c0       	rjmp	.+242    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		default:									break;
		}
	}
	else if(Input == Copy_U8Direction)	/*check if dir is input*/
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	88 23       	and	r24, r24
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <DIO_VidSetPinDirection+0x10e>
    1e2c:	75 c0       	rjmp	.+234    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
	{	error=ES_OK;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_U8port)
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3e 83       	std	Y+6, r19	; 0x06
    1e3a:	2d 83       	std	Y+5, r18	; 0x05
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	59 f1       	breq	.+86     	; 0x1e9c <DIO_VidSetPinDirection+0x17c>
    1e46:	2d 81       	ldd	r18, Y+5	; 0x05
    1e48:	3e 81       	ldd	r19, Y+6	; 0x06
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <DIO_VidSetPinDirection+0x13a>
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	69 f0       	breq	.+26     	; 0x1e72 <DIO_VidSetPinDirection+0x152>
    1e58:	5f c0       	rjmp	.+190    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
    1e5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	89 f1       	breq	.+98     	; 0x1ec6 <DIO_VidSetPinDirection+0x1a6>
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <DIO_VidSetPinDirection+0x150>
    1e6e:	40 c0       	rjmp	.+128    	; 0x1ef0 <DIO_VidSetPinDirection+0x1d0>
    1e70:	53 c0       	rjmp	.+166    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		{
		case PortA :	CLR_BIT(DDRA,Copy_U8Pin);	 break;
    1e72:	aa e3       	ldi	r26, 0x3A	; 58
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ea e3       	ldi	r30, 0x3A	; 58
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <DIO_VidSetPinDirection+0x170>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <DIO_VidSetPinDirection+0x16c>
    1e94:	80 95       	com	r24
    1e96:	84 23       	and	r24, r20
    1e98:	8c 93       	st	X, r24
    1e9a:	3e c0       	rjmp	.+124    	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		case PortB :	CLR_BIT(DDRB,Copy_U8Pin);	 break;
    1e9c:	a7 e3       	ldi	r26, 0x37	; 55
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e7 e3       	ldi	r30, 0x37	; 55
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_VidSetPinDirection+0x19a>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <DIO_VidSetPinDirection+0x196>
    1ebe:	80 95       	com	r24
    1ec0:	84 23       	and	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	29 c0       	rjmp	.+82     	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		case PortC :	CLR_BIT(DDRC,Copy_U8Pin);	 break;
    1ec6:	a4 e3       	ldi	r26, 0x34	; 52
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e4 e3       	ldi	r30, 0x34	; 52
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <DIO_VidSetPinDirection+0x1c4>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <DIO_VidSetPinDirection+0x1c0>
    1ee8:	80 95       	com	r24
    1eea:	84 23       	and	r24, r20
    1eec:	8c 93       	st	X, r24
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <DIO_VidSetPinDirection+0x1f8>
		case PortD :	CLR_BIT(DDRD,Copy_U8Pin);    break;
    1ef0:	a1 e3       	ldi	r26, 0x31	; 49
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e1 e3       	ldi	r30, 0x31	; 49
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	48 2f       	mov	r20, r24
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	02 2e       	mov	r0, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_VidSetPinDirection+0x1ee>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	0a 94       	dec	r0
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_VidSetPinDirection+0x1ea>
    1f12:	80 95       	com	r24
    1f14:	84 23       	and	r24, r20
    1f16:	8c 93       	st	X, r24
		}
	}
	else
	{
	}
 }
    1f18:	28 96       	adiw	r28, 0x08	; 8
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <DIO_VidSetPinValue>:


void DIO_VidSetPinValue(u8 Copy_U8port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	27 97       	sbiw	r28, 0x07	; 7
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	6a 83       	std	Y+2, r22	; 0x02
    1f42:	4b 83       	std	Y+3, r20	; 0x03

	if(High== Copy_U8Value)
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <DIO_VidSetPinValue+0x22>
    1f4a:	6f c0       	rjmp	.+222    	; 0x202a <DIO_VidSetPinValue+0x100>
	{
		switch(Copy_U8port)
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	3f 83       	std	Y+7, r19	; 0x07
    1f54:	2e 83       	std	Y+6, r18	; 0x06
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	49 f1       	breq	.+82     	; 0x1fb2 <DIO_VidSetPinValue+0x88>
    1f60:	2e 81       	ldd	r18, Y+6	; 0x06
    1f62:	3f 81       	ldd	r19, Y+7	; 0x07
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <DIO_VidSetPinValue+0x4a>
    1f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	61 f0       	breq	.+24     	; 0x1f8a <DIO_VidSetPinValue+0x60>
    1f72:	d2 c0       	rjmp	.+420    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
    1f74:	2e 81       	ldd	r18, Y+6	; 0x06
    1f76:	3f 81       	ldd	r19, Y+7	; 0x07
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	71 f1       	breq	.+92     	; 0x1fda <DIO_VidSetPinValue+0xb0>
    1f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f80:	9f 81       	ldd	r25, Y+7	; 0x07
    1f82:	83 30       	cpi	r24, 0x03	; 3
    1f84:	91 05       	cpc	r25, r1
    1f86:	e9 f1       	breq	.+122    	; 0x2002 <DIO_VidSetPinValue+0xd8>
    1f88:	c7 c0       	rjmp	.+398    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		{
		case PortA :	SET_BIT(PORTA,Copy_U8Pin);	break;
    1f8a:	ab e3       	ldi	r26, 0x3B	; 59
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	eb e3       	ldi	r30, 0x3B	; 59
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	48 2f       	mov	r20, r24
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	02 2e       	mov	r0, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <DIO_VidSetPinValue+0x7e>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	0a 94       	dec	r0
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <DIO_VidSetPinValue+0x7a>
    1fac:	84 2b       	or	r24, r20
    1fae:	8c 93       	st	X, r24
    1fb0:	b3 c0       	rjmp	.+358    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		case PortB :	SET_BIT(PORTB,Copy_U8Pin);	break;
    1fb2:	a8 e3       	ldi	r26, 0x38	; 56
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e8 e3       	ldi	r30, 0x38	; 56
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 2e       	mov	r0, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <DIO_VidSetPinValue+0xa6>
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	0a 94       	dec	r0
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <DIO_VidSetPinValue+0xa2>
    1fd4:	84 2b       	or	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	9f c0       	rjmp	.+318    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		case PortC :	SET_BIT(PORTC,Copy_U8Pin);	break;
    1fda:	a5 e3       	ldi	r26, 0x35	; 53
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e3       	ldi	r30, 0x35	; 53
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_VidSetPinValue+0xce>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_VidSetPinValue+0xca>
    1ffc:	84 2b       	or	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	8b c0       	rjmp	.+278    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		case PortD :	SET_BIT(PORTD,Copy_U8Pin);	break;
    2002:	a2 e3       	ldi	r26, 0x32	; 50
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e2 e3       	ldi	r30, 0x32	; 50
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <DIO_VidSetPinValue+0xf6>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <DIO_VidSetPinValue+0xf2>
    2024:	84 2b       	or	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	77 c0       	rjmp	.+238    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		default:									break;
		}
	}
	else if(Low == Copy_U8Value)
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	88 23       	and	r24, r24
    202e:	09 f0       	breq	.+2      	; 0x2032 <DIO_VidSetPinValue+0x108>
    2030:	73 c0       	rjmp	.+230    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_U8port)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	3d 83       	std	Y+5, r19	; 0x05
    203a:	2c 83       	std	Y+4, r18	; 0x04
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	91 05       	cpc	r25, r1
    2044:	59 f1       	breq	.+86     	; 0x209c <DIO_VidSetPinValue+0x172>
    2046:	2c 81       	ldd	r18, Y+4	; 0x04
    2048:	3d 81       	ldd	r19, Y+5	; 0x05
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	2c f4       	brge	.+10     	; 0x205a <DIO_VidSetPinValue+0x130>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f0       	breq	.+26     	; 0x2072 <DIO_VidSetPinValue+0x148>
    2058:	5f c0       	rjmp	.+190    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	89 f1       	breq	.+98     	; 0x20c6 <DIO_VidSetPinValue+0x19c>
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	91 05       	cpc	r25, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <DIO_VidSetPinValue+0x146>
    206e:	40 c0       	rjmp	.+128    	; 0x20f0 <DIO_VidSetPinValue+0x1c6>
    2070:	53 c0       	rjmp	.+166    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		{
		case PortA :	CLR_BIT(PORTA,Copy_U8Pin);	 break;
    2072:	ab e3       	ldi	r26, 0x3B	; 59
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	eb e3       	ldi	r30, 0x3B	; 59
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <DIO_VidSetPinValue+0x166>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <DIO_VidSetPinValue+0x162>
    2094:	80 95       	com	r24
    2096:	84 23       	and	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	3e c0       	rjmp	.+124    	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		case PortB :	CLR_BIT(PORTB,Copy_U8Pin);	 break;
    209c:	a8 e3       	ldi	r26, 0x38	; 56
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e8 e3       	ldi	r30, 0x38	; 56
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <DIO_VidSetPinValue+0x190>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <DIO_VidSetPinValue+0x18c>
    20be:	80 95       	com	r24
    20c0:	84 23       	and	r24, r20
    20c2:	8c 93       	st	X, r24
    20c4:	29 c0       	rjmp	.+82     	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		case PortC :	CLR_BIT(PORTC,Copy_U8Pin);	 break;
    20c6:	a5 e3       	ldi	r26, 0x35	; 53
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e5 e3       	ldi	r30, 0x35	; 53
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	48 2f       	mov	r20, r24
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 2e       	mov	r0, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_VidSetPinValue+0x1ba>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_VidSetPinValue+0x1b6>
    20e8:	80 95       	com	r24
    20ea:	84 23       	and	r24, r20
    20ec:	8c 93       	st	X, r24
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <DIO_VidSetPinValue+0x1ee>
		case PortD :	CLR_BIT(PORTD,Copy_U8Pin);   break;
    20f0:	a2 e3       	ldi	r26, 0x32	; 50
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e2 e3       	ldi	r30, 0x32	; 50
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_VidSetPinValue+0x1e4>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <DIO_VidSetPinValue+0x1e0>
    2112:	80 95       	com	r24
    2114:	84 23       	and	r24, r20
    2116:	8c 93       	st	X, r24
		}
	}
	else
	{
	}
}
    2118:	27 96       	adiw	r28, 0x07	; 7
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <DIO_VidSetPortDirection>:


void DIO_VidSetPortDirection(u8 Copy_U8port,u8 Copy_U8Direction)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <DIO_VidSetPortDirection+0x6>
    2130:	00 d0       	rcall	.+0      	; 0x2132 <DIO_VidSetPortDirection+0x8>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8port)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3c 83       	std	Y+4, r19	; 0x04
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	d1 f0       	breq	.+52     	; 0x2182 <DIO_VidSetPortDirection+0x58>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <DIO_VidSetPortDirection+0x38>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	61 f0       	breq	.+24     	; 0x2178 <DIO_VidSetPortDirection+0x4e>
    2160:	1e c0       	rjmp	.+60     	; 0x219e <DIO_VidSetPortDirection+0x74>
    2162:	2b 81       	ldd	r18, Y+3	; 0x03
    2164:	3c 81       	ldd	r19, Y+4	; 0x04
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	81 f0       	breq	.+32     	; 0x218c <DIO_VidSetPortDirection+0x62>
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	81 f0       	breq	.+32     	; 0x2196 <DIO_VidSetPortDirection+0x6c>
    2176:	13 c0       	rjmp	.+38     	; 0x219e <DIO_VidSetPortDirection+0x74>
	{
	case PortA :	DDRA=Copy_U8Direction;	break;
    2178:	ea e3       	ldi	r30, 0x3A	; 58
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 83       	st	Z, r24
    2180:	0e c0       	rjmp	.+28     	; 0x219e <DIO_VidSetPortDirection+0x74>
	case PortB :	DDRB=Copy_U8Direction;	break;
    2182:	e7 e3       	ldi	r30, 0x37	; 55
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	80 83       	st	Z, r24
    218a:	09 c0       	rjmp	.+18     	; 0x219e <DIO_VidSetPortDirection+0x74>
	case PortC :	DDRC=Copy_U8Direction;	break;
    218c:	e4 e3       	ldi	r30, 0x34	; 52
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	80 83       	st	Z, r24
    2194:	04 c0       	rjmp	.+8      	; 0x219e <DIO_VidSetPortDirection+0x74>
	case PortD :	DDRD=Copy_U8Direction;	break;
    2196:	e1 e3       	ldi	r30, 0x31	; 49
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	80 83       	st	Z, r24
	default:								break;
	}


}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 Copy_U8port,u8 Copy_U8Value)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <DIO_VidSetPortValue+0x6>
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <DIO_VidSetPortValue+0x8>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3c 83       	std	Y+4, r19	; 0x04
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	d1 f0       	breq	.+52     	; 0x2204 <DIO_VidSetPortValue+0x58>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <DIO_VidSetPortValue+0x38>
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	61 f0       	breq	.+24     	; 0x21fa <DIO_VidSetPortValue+0x4e>
    21e2:	1e c0       	rjmp	.+60     	; 0x2220 <DIO_VidSetPortValue+0x74>
    21e4:	2b 81       	ldd	r18, Y+3	; 0x03
    21e6:	3c 81       	ldd	r19, Y+4	; 0x04
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	81 f0       	breq	.+32     	; 0x220e <DIO_VidSetPortValue+0x62>
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	83 30       	cpi	r24, 0x03	; 3
    21f4:	91 05       	cpc	r25, r1
    21f6:	81 f0       	breq	.+32     	; 0x2218 <DIO_VidSetPortValue+0x6c>
    21f8:	13 c0       	rjmp	.+38     	; 0x2220 <DIO_VidSetPortValue+0x74>
	{
	case PortA :	PORTA=Copy_U8Value;	break;
    21fa:	eb e3       	ldi	r30, 0x3B	; 59
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	80 83       	st	Z, r24
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <DIO_VidSetPortValue+0x74>
	case PortB :	PORTB=Copy_U8Value;	break;
    2204:	e8 e3       	ldi	r30, 0x38	; 56
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	80 83       	st	Z, r24
    220c:	09 c0       	rjmp	.+18     	; 0x2220 <DIO_VidSetPortValue+0x74>
	case PortC :	PORTC=Copy_U8Value;	break;
    220e:	e5 e3       	ldi	r30, 0x35	; 53
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	80 83       	st	Z, r24
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <DIO_VidSetPortValue+0x74>
	case PortD :	PORTD=Copy_U8Value;	break;
    2218:	e2 e3       	ldi	r30, 0x32	; 50
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	80 83       	st	Z, r24
	default:							break;
	}
}
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <DIO_U8GetPinValue>:


u8 DIO_U8GetPinValue(u8 Copy_U8port,u8 Copy_U8Pin)
{	u8 Local_U8PinValue;
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <DIO_U8GetPinValue+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <DIO_U8GetPinValue+0x8>
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	6b 83       	std	Y+3, r22	; 0x03
switch(Copy_U8port)
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	3d 83       	std	Y+5, r19	; 0x05
    2248:	2c 83       	std	Y+4, r18	; 0x04
    224a:	4c 81       	ldd	r20, Y+4	; 0x04
    224c:	5d 81       	ldd	r21, Y+5	; 0x05
    224e:	41 30       	cpi	r20, 0x01	; 1
    2250:	51 05       	cpc	r21, r1
    2252:	41 f1       	breq	.+80     	; 0x22a4 <DIO_U8GetPinValue+0x76>
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	9d 81       	ldd	r25, Y+5	; 0x05
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	91 05       	cpc	r25, r1
    225c:	34 f4       	brge	.+12     	; 0x226a <DIO_U8GetPinValue+0x3c>
    225e:	2c 81       	ldd	r18, Y+4	; 0x04
    2260:	3d 81       	ldd	r19, Y+5	; 0x05
    2262:	21 15       	cp	r18, r1
    2264:	31 05       	cpc	r19, r1
    2266:	61 f0       	breq	.+24     	; 0x2280 <DIO_U8GetPinValue+0x52>
    2268:	52 c0       	rjmp	.+164    	; 0x230e <DIO_U8GetPinValue+0xe0>
    226a:	4c 81       	ldd	r20, Y+4	; 0x04
    226c:	5d 81       	ldd	r21, Y+5	; 0x05
    226e:	42 30       	cpi	r20, 0x02	; 2
    2270:	51 05       	cpc	r21, r1
    2272:	51 f1       	breq	.+84     	; 0x22c8 <DIO_U8GetPinValue+0x9a>
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	83 30       	cpi	r24, 0x03	; 3
    227a:	91 05       	cpc	r25, r1
    227c:	b9 f1       	breq	.+110    	; 0x22ec <DIO_U8GetPinValue+0xbe>
    227e:	47 c0       	rjmp	.+142    	; 0x230e <DIO_U8GetPinValue+0xe0>
{
case PortA :	Local_U8PinValue=GET_BIT(PINA,Copy_U8Pin);	 break;
    2280:	e9 e3       	ldi	r30, 0x39	; 57
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a9 01       	movw	r20, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <DIO_U8GetPinValue+0x6a>
    2294:	55 95       	asr	r21
    2296:	47 95       	ror	r20
    2298:	8a 95       	dec	r24
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <DIO_U8GetPinValue+0x66>
    229c:	ca 01       	movw	r24, r20
    229e:	81 70       	andi	r24, 0x01	; 1
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	35 c0       	rjmp	.+106    	; 0x230e <DIO_U8GetPinValue+0xe0>
case PortB :	Local_U8PinValue=GET_BIT(PINB,Copy_U8Pin);	 break;
    22a4:	e6 e3       	ldi	r30, 0x36	; 54
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a9 01       	movw	r20, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_U8GetPinValue+0x8e>
    22b8:	55 95       	asr	r21
    22ba:	47 95       	ror	r20
    22bc:	8a 95       	dec	r24
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <DIO_U8GetPinValue+0x8a>
    22c0:	ca 01       	movw	r24, r20
    22c2:	81 70       	andi	r24, 0x01	; 1
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	23 c0       	rjmp	.+70     	; 0x230e <DIO_U8GetPinValue+0xe0>
case PortC :	Local_U8PinValue=GET_BIT(PINC,Copy_U8Pin);	 break;
    22c8:	e3 e3       	ldi	r30, 0x33	; 51
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a9 01       	movw	r20, r18
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <DIO_U8GetPinValue+0xb2>
    22dc:	55 95       	asr	r21
    22de:	47 95       	ror	r20
    22e0:	8a 95       	dec	r24
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <DIO_U8GetPinValue+0xae>
    22e4:	ca 01       	movw	r24, r20
    22e6:	81 70       	andi	r24, 0x01	; 1
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <DIO_U8GetPinValue+0xe0>
case PortD: 	Local_U8PinValue=GET_BIT(PIND,Copy_U8Pin);	 break;
    22ec:	e0 e3       	ldi	r30, 0x30	; 48
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a9 01       	movw	r20, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <DIO_U8GetPinValue+0xd6>
    2300:	55 95       	asr	r21
    2302:	47 95       	ror	r20
    2304:	8a 95       	dec	r24
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <DIO_U8GetPinValue+0xd2>
    2308:	ca 01       	movw	r24, r20
    230a:	81 70       	andi	r24, 0x01	; 1
    230c:	89 83       	std	Y+1, r24	; 0x01
default:													 break;

}
return Local_U8PinValue;
    230e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <DIO_VidTogglePin>:



void DIO_VidTogglePin(u8 Copy_U8port,u8 Copy_U8Pin)
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <DIO_VidTogglePin+0x6>
    2326:	00 d0       	rcall	.+0      	; 0x2328 <DIO_VidTogglePin+0x8>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	3c 83       	std	Y+4, r19	; 0x04
    2338:	2b 83       	std	Y+3, r18	; 0x03
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	91 05       	cpc	r25, r1
    2342:	49 f1       	breq	.+82     	; 0x2396 <DIO_VidTogglePin+0x76>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 05       	cpc	r19, r1
    234c:	2c f4       	brge	.+10     	; 0x2358 <DIO_VidTogglePin+0x38>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	61 f0       	breq	.+24     	; 0x236e <DIO_VidTogglePin+0x4e>
    2356:	5a c0       	rjmp	.+180    	; 0x240c <DIO_VidTogglePin+0xec>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	22 30       	cpi	r18, 0x02	; 2
    235e:	31 05       	cpc	r19, r1
    2360:	71 f1       	breq	.+92     	; 0x23be <DIO_VidTogglePin+0x9e>
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	83 30       	cpi	r24, 0x03	; 3
    2368:	91 05       	cpc	r25, r1
    236a:	e9 f1       	breq	.+122    	; 0x23e6 <DIO_VidTogglePin+0xc6>
    236c:	4f c0       	rjmp	.+158    	; 0x240c <DIO_VidTogglePin+0xec>
	{
	case PortA :	TOGGLE_BIT(DDRA,Copy_U8Pin);	break;
    236e:	aa e3       	ldi	r26, 0x3A	; 58
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ea e3       	ldi	r30, 0x3A	; 58
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_VidTogglePin+0x6c>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_VidTogglePin+0x68>
    2390:	84 27       	eor	r24, r20
    2392:	8c 93       	st	X, r24
    2394:	3b c0       	rjmp	.+118    	; 0x240c <DIO_VidTogglePin+0xec>
	case PortB :	TOGGLE_BIT(DDRB,Copy_U8Pin);	break;
    2396:	a7 e3       	ldi	r26, 0x37	; 55
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e7 e3       	ldi	r30, 0x37	; 55
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	48 2f       	mov	r20, r24
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	02 2e       	mov	r0, r18
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <DIO_VidTogglePin+0x94>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	0a 94       	dec	r0
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <DIO_VidTogglePin+0x90>
    23b8:	84 27       	eor	r24, r20
    23ba:	8c 93       	st	X, r24
    23bc:	27 c0       	rjmp	.+78     	; 0x240c <DIO_VidTogglePin+0xec>
	case PortC :	TOGGLE_BIT(DDRC,Copy_U8Pin);	break;
    23be:	a4 e3       	ldi	r26, 0x34	; 52
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e4 e3       	ldi	r30, 0x34	; 52
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	48 2f       	mov	r20, r24
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 2e       	mov	r0, r18
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <DIO_VidTogglePin+0xbc>
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	0a 94       	dec	r0
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <DIO_VidTogglePin+0xb8>
    23e0:	84 27       	eor	r24, r20
    23e2:	8c 93       	st	X, r24
    23e4:	13 c0       	rjmp	.+38     	; 0x240c <DIO_VidTogglePin+0xec>
	case PortD :	TOGGLE_BIT(DDRD,Copy_U8Pin);	break;
    23e6:	a1 e3       	ldi	r26, 0x31	; 49
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e1 e3       	ldi	r30, 0x31	; 49
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	48 2f       	mov	r20, r24
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	02 2e       	mov	r0, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <DIO_VidTogglePin+0xe4>
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	0a 94       	dec	r0
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <DIO_VidTogglePin+0xe0>
    2408:	84 27       	eor	r24, r20
    240a:	8c 93       	st	X, r24
	default:										break;
	}
}
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <DIO_VidTogglePinValue>:



void DIO_VidTogglePinValue(u8 Copy_U8port,u8 Copy_U8Pin)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <DIO_VidTogglePinValue+0x6>
    2420:	00 d0       	rcall	.+0      	; 0x2422 <DIO_VidTogglePinValue+0x8>
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	3c 83       	std	Y+4, r19	; 0x04
    2432:	2b 83       	std	Y+3, r18	; 0x03
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	91 05       	cpc	r25, r1
    243c:	49 f1       	breq	.+82     	; 0x2490 <DIO_VidTogglePinValue+0x76>
    243e:	2b 81       	ldd	r18, Y+3	; 0x03
    2440:	3c 81       	ldd	r19, Y+4	; 0x04
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	2c f4       	brge	.+10     	; 0x2452 <DIO_VidTogglePinValue+0x38>
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	61 f0       	breq	.+24     	; 0x2468 <DIO_VidTogglePinValue+0x4e>
    2450:	5a c0       	rjmp	.+180    	; 0x2506 <DIO_VidTogglePinValue+0xec>
    2452:	2b 81       	ldd	r18, Y+3	; 0x03
    2454:	3c 81       	ldd	r19, Y+4	; 0x04
    2456:	22 30       	cpi	r18, 0x02	; 2
    2458:	31 05       	cpc	r19, r1
    245a:	71 f1       	breq	.+92     	; 0x24b8 <DIO_VidTogglePinValue+0x9e>
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	83 30       	cpi	r24, 0x03	; 3
    2462:	91 05       	cpc	r25, r1
    2464:	e9 f1       	breq	.+122    	; 0x24e0 <DIO_VidTogglePinValue+0xc6>
    2466:	4f c0       	rjmp	.+158    	; 0x2506 <DIO_VidTogglePinValue+0xec>
	{
	case PortA :	TOGGLE_BIT(PORTA,Copy_U8Pin);	break;
    2468:	ab e3       	ldi	r26, 0x3B	; 59
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	eb e3       	ldi	r30, 0x3B	; 59
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	48 2f       	mov	r20, r24
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	02 2e       	mov	r0, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <DIO_VidTogglePinValue+0x6c>
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	0a 94       	dec	r0
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <DIO_VidTogglePinValue+0x68>
    248a:	84 27       	eor	r24, r20
    248c:	8c 93       	st	X, r24
    248e:	3b c0       	rjmp	.+118    	; 0x2506 <DIO_VidTogglePinValue+0xec>
	case PortB :	TOGGLE_BIT(PORTB,Copy_U8Pin);	break;
    2490:	a8 e3       	ldi	r26, 0x38	; 56
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e8 e3       	ldi	r30, 0x38	; 56
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	48 2f       	mov	r20, r24
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 2e       	mov	r0, r18
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <DIO_VidTogglePinValue+0x94>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	0a 94       	dec	r0
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <DIO_VidTogglePinValue+0x90>
    24b2:	84 27       	eor	r24, r20
    24b4:	8c 93       	st	X, r24
    24b6:	27 c0       	rjmp	.+78     	; 0x2506 <DIO_VidTogglePinValue+0xec>
	case PortC :	TOGGLE_BIT(PORTC,Copy_U8Pin);	break;
    24b8:	a5 e3       	ldi	r26, 0x35	; 53
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e5 e3       	ldi	r30, 0x35	; 53
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	48 2f       	mov	r20, r24
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	02 2e       	mov	r0, r18
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <DIO_VidTogglePinValue+0xbc>
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	0a 94       	dec	r0
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <DIO_VidTogglePinValue+0xb8>
    24da:	84 27       	eor	r24, r20
    24dc:	8c 93       	st	X, r24
    24de:	13 c0       	rjmp	.+38     	; 0x2506 <DIO_VidTogglePinValue+0xec>
	case PortD :	TOGGLE_BIT(PORTD,Copy_U8Pin);	break;
    24e0:	a2 e3       	ldi	r26, 0x32	; 50
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e2 e3       	ldi	r30, 0x32	; 50
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	48 2f       	mov	r20, r24
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 2e       	mov	r0, r18
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <DIO_VidTogglePinValue+0xe4>
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	0a 94       	dec	r0
    2500:	e2 f7       	brpl	.-8      	; 0x24fa <DIO_VidTogglePinValue+0xe0>
    2502:	84 27       	eor	r24, r20
    2504:	8c 93       	st	X, r24
	default:										break;
	}
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <ADC_VidInit>:
#include"../lib/AVR32_REG.h"
#include"../DIO/DIO_Interface.h"
#include "ADC_Private.h"
#include "ADC_Config.h"
void ADC_VidInit()
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
#elif ADC_PRESCALER == PRESCALER_8
	SET_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	CLR_BIT(ADCSRA,2);
#elif ADC_PRESCALER == PRESCALER_16
	CLR_BIT(ADCSRA,0);
    251c:	a6 e2       	ldi	r26, 0x26	; 38
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e6 e2       	ldi	r30, 0x26	; 38
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8e 7f       	andi	r24, 0xFE	; 254
    2528:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,1);
    252a:	a6 e2       	ldi	r26, 0x26	; 38
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e6 e2       	ldi	r30, 0x26	; 38
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8d 7f       	andi	r24, 0xFD	; 253
    2536:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    2538:	a6 e2       	ldi	r26, 0x26	; 38
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e6 e2       	ldi	r30, 0x26	; 38
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	84 60       	ori	r24, 0x04	; 4
    2544:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,6);
#elif ADC_REF == AVCC
	CLR_BIT(ADMUX,7);
	SET_BIT(ADMUX,6);
#elif ADC_REF == INTERNAL2_5V
	SET_BIT(ADMUX,7);
    2546:	a7 e2       	ldi	r26, 0x27	; 39
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e7 e2       	ldi	r30, 0x27	; 39
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	80 68       	ori	r24, 0x80	; 128
    2552:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
    2554:	a7 e2       	ldi	r26, 0x27	; 39
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e7 e2       	ldi	r30, 0x27	; 39
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	80 64       	ori	r24, 0x40	; 64
    2560:	8c 93       	st	X, r24
#endif
#if ADC_ADJ==RIGHT
	CLR_BIT(ADMUX,ADLAR);
    2562:	a7 e2       	ldi	r26, 0x27	; 39
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e7 e2       	ldi	r30, 0x27	; 39
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	8f 7d       	andi	r24, 0xDF	; 223
    256e:	8c 93       	st	X, r24
#elif ADC_ADJ==LEFT
	SET_BIT(ADMUX,ADLAR);
#endif
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <ADC_VidEnable>:

void ADC_VidEnable()
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADC_Enable);
    257e:	a6 e2       	ldi	r26, 0x26	; 38
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e6 e2       	ldi	r30, 0x26	; 38
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	80 68       	ori	r24, 0x80	; 128
    258a:	8c 93       	st	X, r24
}
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <ADC_VidDisable>:

void ADC_VidDisable()
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADC_Enable);
    259a:	a6 e2       	ldi	r26, 0x26	; 38
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e6 e2       	ldi	r30, 0x26	; 38
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	8f 77       	andi	r24, 0x7F	; 127
    25a6:	8c 93       	st	X, r24
}
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <ADC_VidSelectChannel>:

void ADC_VidSelectChannel(u8 Copy_U8Channel)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0XE0;
    25ba:	a7 e2       	ldi	r26, 0x27	; 39
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e7 e2       	ldi	r30, 0x27	; 39
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 7e       	andi	r24, 0xE0	; 224
    25c6:	8c 93       	st	X, r24
	ADMUX|=Copy_U8Channel;
    25c8:	a7 e2       	ldi	r26, 0x27	; 39
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e7 e2       	ldi	r30, 0x27	; 39
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	90 81       	ld	r25, Z
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	89 2b       	or	r24, r25
    25d6:	8c 93       	st	X, r24

}
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <ADC_VidStartConversion>:

void ADC_VidStartConversion()
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,Start_Conversion);
    25e8:	a6 e2       	ldi	r26, 0x26	; 38
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e6 e2       	ldi	r30, 0x26	; 38
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 64       	ori	r24, 0x40	; 64
    25f4:	8c 93       	st	X, r24
}
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <ADC_VidEnableAutoTriggerMode>:

void ADC_VidEnableAutoTriggerMode(AutoTrigger Copy_U8Mode)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <ADC_VidEnableAutoTriggerMode+0x6>
    2602:	0f 92       	push	r0
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8Mode){
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	3b 83       	std	Y+3, r19	; 0x03
    2612:	2a 83       	std	Y+2, r18	; 0x02
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	31 f0       	breq	.+12     	; 0x2628 <ADC_VidEnableAutoTriggerMode+0x2c>
    261c:	2a 81       	ldd	r18, Y+2	; 0x02
    261e:	3b 81       	ldd	r19, Y+3	; 0x03
    2620:	21 30       	cpi	r18, 0x01	; 1
    2622:	31 05       	cpc	r19, r1
    2624:	49 f0       	breq	.+18     	; 0x2638 <ADC_VidEnableAutoTriggerMode+0x3c>
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <ADC_VidEnableAutoTriggerMode+0x4a>
	case DISEN:	CLR_BIT(ADCSRA,ADATE);break;
    2628:	a6 e2       	ldi	r26, 0x26	; 38
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e6 e2       	ldi	r30, 0x26	; 38
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	8f 7d       	andi	r24, 0xDF	; 223
    2634:	8c 93       	st	X, r24
    2636:	07 c0       	rjmp	.+14     	; 0x2646 <ADC_VidEnableAutoTriggerMode+0x4a>
	case EN:	SET_BIT(ADCSRA,ADATE);break;
    2638:	a6 e2       	ldi	r26, 0x26	; 38
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e6 e2       	ldi	r30, 0x26	; 38
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	80 62       	ori	r24, 0x20	; 32
    2644:	8c 93       	st	X, r24
	}
	}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <ADC_VidSetTriggerSource>:
void ADC_VidSetTriggerSource(u8 Copy_U8Mode){
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <ADC_VidSetTriggerSource+0x6>
    2658:	0f 92       	push	r0
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8Mode){
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	3b 83       	std	Y+3, r19	; 0x03
    2668:	2a 83       	std	Y+2, r18	; 0x02
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	83 30       	cpi	r24, 0x03	; 3
    2670:	91 05       	cpc	r25, r1
    2672:	09 f4       	brne	.+2      	; 0x2676 <ADC_VidSetTriggerSource+0x24>
    2674:	70 c0       	rjmp	.+224    	; 0x2756 <ADC_VidSetTriggerSource+0x104>
    2676:	2a 81       	ldd	r18, Y+2	; 0x02
    2678:	3b 81       	ldd	r19, Y+3	; 0x03
    267a:	24 30       	cpi	r18, 0x04	; 4
    267c:	31 05       	cpc	r19, r1
    267e:	84 f4       	brge	.+32     	; 0x26a0 <ADC_VidSetTriggerSource+0x4e>
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	9b 81       	ldd	r25, Y+3	; 0x03
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	91 05       	cpc	r25, r1
    2688:	d1 f1       	breq	.+116    	; 0x26fe <ADC_VidSetTriggerSource+0xac>
    268a:	2a 81       	ldd	r18, Y+2	; 0x02
    268c:	3b 81       	ldd	r19, Y+3	; 0x03
    268e:	22 30       	cpi	r18, 0x02	; 2
    2690:	31 05       	cpc	r19, r1
    2692:	0c f0       	brlt	.+2      	; 0x2696 <ADC_VidSetTriggerSource+0x44>
    2694:	4a c0       	rjmp	.+148    	; 0x272a <ADC_VidSetTriggerSource+0xd8>
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	d1 f0       	breq	.+52     	; 0x26d2 <ADC_VidSetTriggerSource+0x80>
    269e:	c8 c0       	rjmp	.+400    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
    26a0:	2a 81       	ldd	r18, Y+2	; 0x02
    26a2:	3b 81       	ldd	r19, Y+3	; 0x03
    26a4:	25 30       	cpi	r18, 0x05	; 5
    26a6:	31 05       	cpc	r19, r1
    26a8:	09 f4       	brne	.+2      	; 0x26ac <ADC_VidSetTriggerSource+0x5a>
    26aa:	81 c0       	rjmp	.+258    	; 0x27ae <ADC_VidSetTriggerSource+0x15c>
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	85 30       	cpi	r24, 0x05	; 5
    26b2:	91 05       	cpc	r25, r1
    26b4:	0c f4       	brge	.+2      	; 0x26b8 <ADC_VidSetTriggerSource+0x66>
    26b6:	65 c0       	rjmp	.+202    	; 0x2782 <ADC_VidSetTriggerSource+0x130>
    26b8:	2a 81       	ldd	r18, Y+2	; 0x02
    26ba:	3b 81       	ldd	r19, Y+3	; 0x03
    26bc:	26 30       	cpi	r18, 0x06	; 6
    26be:	31 05       	cpc	r19, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <ADC_VidSetTriggerSource+0x72>
    26c2:	8b c0       	rjmp	.+278    	; 0x27da <ADC_VidSetTriggerSource+0x188>
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	87 30       	cpi	r24, 0x07	; 7
    26ca:	91 05       	cpc	r25, r1
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <ADC_VidSetTriggerSource+0x7e>
    26ce:	9b c0       	rjmp	.+310    	; 0x2806 <ADC_VidSetTriggerSource+0x1b4>
    26d0:	af c0       	rjmp	.+350    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
	case 0: //free running mode
			CLR_BIT(SFIOR,5);
    26d2:	a0 e5       	ldi	r26, 0x50	; 80
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e0 e5       	ldi	r30, 0x50	; 80
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	8f 7d       	andi	r24, 0xDF	; 223
    26de:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,6);
    26e0:	a0 e5       	ldi	r26, 0x50	; 80
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e0 e5       	ldi	r30, 0x50	; 80
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 7b       	andi	r24, 0xBF	; 191
    26ec:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,7);
    26ee:	a0 e5       	ldi	r26, 0x50	; 80
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e0 e5       	ldi	r30, 0x50	; 80
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	8f 77       	andi	r24, 0x7F	; 127
    26fa:	8c 93       	st	X, r24
    26fc:	99 c0       	rjmp	.+306    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
			break;
	case 1://Analog Comparator
	        SET_BIT(SFIOR,5);
    26fe:	a0 e5       	ldi	r26, 0x50	; 80
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e0 e5       	ldi	r30, 0x50	; 80
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	80 62       	ori	r24, 0x20	; 32
    270a:	8c 93       	st	X, r24
	        CLR_BIT(SFIOR,6);
    270c:	a0 e5       	ldi	r26, 0x50	; 80
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e0 e5       	ldi	r30, 0x50	; 80
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	8f 7b       	andi	r24, 0xBF	; 191
    2718:	8c 93       	st	X, r24
	        CLR_BIT(SFIOR,7);
    271a:	a0 e5       	ldi	r26, 0x50	; 80
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e0 e5       	ldi	r30, 0x50	; 80
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 77       	andi	r24, 0x7F	; 127
    2726:	8c 93       	st	X, r24
    2728:	83 c0       	rjmp	.+262    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
	        break;
	case 2://External Interrupt Request 0
			CLR_BIT(SFIOR,5);
    272a:	a0 e5       	ldi	r26, 0x50	; 80
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e0 e5       	ldi	r30, 0x50	; 80
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	8f 7d       	andi	r24, 0xDF	; 223
    2736:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    2738:	a0 e5       	ldi	r26, 0x50	; 80
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e0 e5       	ldi	r30, 0x50	; 80
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	80 64       	ori	r24, 0x40	; 64
    2744:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,7);
    2746:	a0 e5       	ldi	r26, 0x50	; 80
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e0 e5       	ldi	r30, 0x50	; 80
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8f 77       	andi	r24, 0x7F	; 127
    2752:	8c 93       	st	X, r24
    2754:	6d c0       	rjmp	.+218    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
			break;
	case 3://Timer/Counter0 Compare Match
			SET_BIT(SFIOR,5);
    2756:	a0 e5       	ldi	r26, 0x50	; 80
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e0 e5       	ldi	r30, 0x50	; 80
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	80 62       	ori	r24, 0x20	; 32
    2762:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    2764:	a0 e5       	ldi	r26, 0x50	; 80
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e0 e5       	ldi	r30, 0x50	; 80
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	80 64       	ori	r24, 0x40	; 64
    2770:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,7);
    2772:	a0 e5       	ldi	r26, 0x50	; 80
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e0 e5       	ldi	r30, 0x50	; 80
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8f 77       	andi	r24, 0x7F	; 127
    277e:	8c 93       	st	X, r24
    2780:	57 c0       	rjmp	.+174    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
			break;
	case 4://Timer/Counter0 Overflow
			CLR_BIT(SFIOR,5);
    2782:	a0 e5       	ldi	r26, 0x50	; 80
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e0 e5       	ldi	r30, 0x50	; 80
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8f 7d       	andi	r24, 0xDF	; 223
    278e:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,6);
    2790:	a0 e5       	ldi	r26, 0x50	; 80
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e0 e5       	ldi	r30, 0x50	; 80
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8f 7b       	andi	r24, 0xBF	; 191
    279c:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    279e:	a0 e5       	ldi	r26, 0x50	; 80
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e0 e5       	ldi	r30, 0x50	; 80
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	80 68       	ori	r24, 0x80	; 128
    27aa:	8c 93       	st	X, r24
    27ac:	41 c0       	rjmp	.+130    	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
			break;
	case 5://Timer/Counter1 Compare Match B
			SET_BIT(SFIOR,5);
    27ae:	a0 e5       	ldi	r26, 0x50	; 80
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e0 e5       	ldi	r30, 0x50	; 80
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	80 62       	ori	r24, 0x20	; 32
    27ba:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,6);
    27bc:	a0 e5       	ldi	r26, 0x50	; 80
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e0 e5       	ldi	r30, 0x50	; 80
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7b       	andi	r24, 0xBF	; 191
    27c8:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    27ca:	a0 e5       	ldi	r26, 0x50	; 80
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e0 e5       	ldi	r30, 0x50	; 80
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 68       	ori	r24, 0x80	; 128
    27d6:	8c 93       	st	X, r24
    27d8:	2b c0       	rjmp	.+86     	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
			break;
	case 6://Timer/Counter1 Overflow
			CLR_BIT(SFIOR,5);
    27da:	a0 e5       	ldi	r26, 0x50	; 80
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e0 e5       	ldi	r30, 0x50	; 80
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 7d       	andi	r24, 0xDF	; 223
    27e6:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    27e8:	a0 e5       	ldi	r26, 0x50	; 80
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e0 e5       	ldi	r30, 0x50	; 80
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	80 64       	ori	r24, 0x40	; 64
    27f4:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    27f6:	a0 e5       	ldi	r26, 0x50	; 80
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e0 e5       	ldi	r30, 0x50	; 80
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	80 68       	ori	r24, 0x80	; 128
    2802:	8c 93       	st	X, r24
    2804:	15 c0       	rjmp	.+42     	; 0x2830 <ADC_VidSetTriggerSource+0x1de>
			break;
	case 7://Timer/Counter1 Capture Event
			SET_BIT(SFIOR,5);
    2806:	a0 e5       	ldi	r26, 0x50	; 80
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e0 e5       	ldi	r30, 0x50	; 80
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 62       	ori	r24, 0x20	; 32
    2812:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    2814:	a0 e5       	ldi	r26, 0x50	; 80
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e0 e5       	ldi	r30, 0x50	; 80
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 64       	ori	r24, 0x40	; 64
    2820:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    2822:	a0 e5       	ldi	r26, 0x50	; 80
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e0 e5       	ldi	r30, 0x50	; 80
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	80 68       	ori	r24, 0x80	; 128
    282e:	8c 93       	st	X, r24
			break;
}
}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <ADC_VidEnableInterrupt>:

void ADC_VidEnableInterrupt()
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADC_InterruptEnable);
    2844:	a6 e2       	ldi	r26, 0x26	; 38
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e6 e2       	ldi	r30, 0x26	; 38
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	88 60       	ori	r24, 0x08	; 8
    2850:	8c 93       	st	X, r24
}
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <ADC_VidDisableInterrupt>:

void ADC_VidDisableInterrupt()
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADC_InterruptEnable);
    2860:	a6 e2       	ldi	r26, 0x26	; 38
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e2       	ldi	r30, 0x26	; 38
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	87 7f       	andi	r24, 0xF7	; 247
    286c:	8c 93       	st	X, r24
}
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <ADC_VidRead>:

u16 ADC_VidRead()
{	u16 Copy_PU16ADC_Value=0;
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	00 d0       	rcall	.+0      	; 0x287a <ADC_VidRead+0x6>
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	1a 82       	std	Y+2, r1	; 0x02
    2880:	19 82       	std	Y+1, r1	; 0x01
	ADC_VidStartConversion();
    2882:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_VidStartConversion>
	while(!GET_BIT( ADCSRA,ADC_InterruptFlag));
    2886:	e6 e2       	ldi	r30, 0x26	; 38
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	82 95       	swap	r24
    288e:	8f 70       	andi	r24, 0x0F	; 15
    2890:	88 23       	and	r24, r24
    2892:	c9 f3       	breq	.-14     	; 0x2886 <ADC_VidRead+0x12>
	SET_BIT(ADCSRA,ADC_InterruptEnable);		//to clear the flag set it to one
    2894:	a6 e2       	ldi	r26, 0x26	; 38
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e6 e2       	ldi	r30, 0x26	; 38
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 60       	ori	r24, 0x08	; 8
    28a0:	8c 93       	st	X, r24
#if ADC_ADJ==RIGHT
	Copy_PU16ADC_Value = ADC ;
    28a2:	e4 e2       	ldi	r30, 0x24	; 36
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
#elif ADC_ADJ==LEFT
	Copy_PU16ADC_Value = (ADCL>>6)+ (ADCH<<2) ;
#endif

 	 return Copy_PU16ADC_Value;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <Display_tempLCD>:
#include "ADC/ADC_Interface.h"
#include "LCD/Lcd_Interface.h"
#include "LM35/LM35_Interface.h"
#include"UART/UART_Intereface.h"

void Display_tempLCD(){
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	62 97       	sbiw	r28, 0x12	; 18
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
	f32 temp;
	LCD_VidInit();
    28d0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_VidInit>
	LM35_Init();
    28d4:	0e 94 00 08 	call	0x1000	; 0x1000 <LM35_Init>

	while(1){
		LCD_VidClearDisplay();
    28d8:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_VidClearDisplay>
		LM35_VidRead(&temp);
    28dc:	ce 01       	movw	r24, r28
    28de:	0f 96       	adiw	r24, 0x0f	; 15
    28e0:	0e 94 13 08 	call	0x1026	; 0x1026 <LM35_VidRead>
		LCD_VidPrintFloatNumber(temp);
    28e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e6:	98 89       	ldd	r25, Y+16	; 0x10
    28e8:	a9 89       	ldd	r26, Y+17	; 0x11
    28ea:	ba 89       	ldd	r27, Y+18	; 0x12
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <LCD_VidPrintFloatNumber>
				LCD_VidSendData('C');
    28f4:	83 e4       	ldi	r24, 0x43	; 67
    28f6:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_VidSendData>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	aa e7       	ldi	r26, 0x7A	; 122
    2900:	b4 e4       	ldi	r27, 0x44	; 68
    2902:	8b 87       	std	Y+11, r24	; 0x0b
    2904:	9c 87       	std	Y+12, r25	; 0x0c
    2906:	ad 87       	std	Y+13, r26	; 0x0d
    2908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290a:	6b 85       	ldd	r22, Y+11	; 0x0b
    290c:	7c 85       	ldd	r23, Y+12	; 0x0c
    290e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2910:	9e 85       	ldd	r25, Y+14	; 0x0e
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a ef       	ldi	r20, 0xFA	; 250
    2918:	54 e4       	ldi	r21, 0x44	; 68
    291a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8f 83       	std	Y+7, r24	; 0x07
    2924:	98 87       	std	Y+8, r25	; 0x08
    2926:	a9 87       	std	Y+9, r26	; 0x09
    2928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    293e:	88 23       	and	r24, r24
    2940:	2c f4       	brge	.+10     	; 0x294c <Display_tempLCD+0x90>
		__ticks = 1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
    294a:	3f c0       	rjmp	.+126    	; 0x29ca <Display_tempLCD+0x10e>
	else if (__tmp > 65535)
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	4c f5       	brge	.+82     	; 0x29b6 <Display_tempLCD+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	6b 85       	ldd	r22, Y+11	; 0x0b
    2966:	7c 85       	ldd	r23, Y+12	; 0x0c
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	0f c0       	rjmp	.+30     	; 0x29ac <Display_tempLCD+0xf0>
    298e:	88 ec       	ldi	r24, 0xC8	; 200
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <Display_tempLCD+0xde>
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	69 f7       	brne	.-38     	; 0x298e <Display_tempLCD+0xd2>
    29b4:	91 cf       	rjmp	.-222    	; 0x28d8 <Display_tempLCD+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	9a 81       	ldd	r25, Y+2	; 0x02
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <Display_tempLCD+0x11a>
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	7c cf       	rjmp	.-264    	; 0x28d8 <Display_tempLCD+0x1c>

000029e0 <Num_Send_TTL>:
				_delay_ms(1000);

	}
}
void Num_Send_TTL(u16 num){
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	27 97       	sbiw	r28, 0x07	; 7
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	9f 83       	std	Y+7, r25	; 0x07
    29f6:	8e 83       	std	Y+6, r24	; 0x06
	u16 rev_num=0,local_num=num;
    29f8:	1d 82       	std	Y+5, r1	; 0x05
    29fa:	1c 82       	std	Y+4, r1	; 0x04
    29fc:	8e 81       	ldd	r24, Y+6	; 0x06
    29fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2a00:	9b 83       	std	Y+3, r25	; 0x03
    2a02:	8a 83       	std	Y+2, r24	; 0x02
	u8 ZeroAscii=48;
    2a04:	80 e3       	ldi	r24, 0x30	; 48
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	22 c0       	rjmp	.+68     	; 0x2a4e <Num_Send_TTL+0x6e>
	while(local_num){
		rev_num=(rev_num*10)+local_num%10;
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a0e:	9c 01       	movw	r18, r24
    2a10:	22 0f       	add	r18, r18
    2a12:	33 1f       	adc	r19, r19
    2a14:	c9 01       	movw	r24, r18
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	f9 01       	movw	r30, r18
    2a20:	e8 0f       	add	r30, r24
    2a22:	f9 1f       	adc	r31, r25
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	9b 81       	ldd	r25, Y+3	; 0x03
    2a28:	2a e0       	ldi	r18, 0x0A	; 10
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__udivmodhi4>
    2a32:	8e 0f       	add	r24, r30
    2a34:	9f 1f       	adc	r25, r31
    2a36:	9d 83       	std	Y+5, r25	; 0x05
    2a38:	8c 83       	std	Y+4, r24	; 0x04
		local_num/=10;
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3e:	2a e0       	ldi	r18, 0x0A	; 10
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	b9 01       	movw	r22, r18
    2a44:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__udivmodhi4>
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9b 83       	std	Y+3, r25	; 0x03
    2a4c:	8a 83       	std	Y+2, r24	; 0x02
	}
}
void Num_Send_TTL(u16 num){
	u16 rev_num=0,local_num=num;
	u8 ZeroAscii=48;
	while(local_num){
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	9b 81       	ldd	r25, Y+3	; 0x03
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	d1 f6       	brne	.-76     	; 0x2a0a <Num_Send_TTL+0x2a>
    2a56:	19 c0       	rjmp	.+50     	; 0x2a8a <Num_Send_TTL+0xaa>
		rev_num=(rev_num*10)+local_num%10;
		local_num/=10;
	}
	while(rev_num){
		UART_VidSend((rev_num%10)+ZeroAscii);
    2a58:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5c:	2a e0       	ldi	r18, 0x0A	; 10
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	b9 01       	movw	r22, r18
    2a62:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__udivmodhi4>
    2a66:	9c 01       	movw	r18, r24
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	82 0f       	add	r24, r18
    2a70:	93 1f       	adc	r25, r19
    2a72:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_VidSend>
		rev_num/=10;
    2a76:	8c 81       	ldd	r24, Y+4	; 0x04
    2a78:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7a:	2a e0       	ldi	r18, 0x0A	; 10
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	b9 01       	movw	r22, r18
    2a80:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__udivmodhi4>
    2a84:	cb 01       	movw	r24, r22
    2a86:	9d 83       	std	Y+5, r25	; 0x05
    2a88:	8c 83       	std	Y+4, r24	; 0x04
	u8 ZeroAscii=48;
	while(local_num){
		rev_num=(rev_num*10)+local_num%10;
		local_num/=10;
	}
	while(rev_num){
    2a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	19 f7       	brne	.-58     	; 0x2a58 <Num_Send_TTL+0x78>
		UART_VidSend((rev_num%10)+ZeroAscii);
		rev_num/=10;
	}
}
    2a92:	27 96       	adiw	r28, 0x07	; 7
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <Display_tempTTL>:
void Display_tempTTL(){
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	64 97       	sbiw	r28, 0x14	; 20
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
	f32 temp;
	u16 t;
  		LM35_Init();
    2ab8:	0e 94 00 08 	call	0x1000	; 0x1000 <LM35_Init>
 		DIO_VidSetPortDirection(PORTD, 0x02);
    2abc:	e2 e3       	ldi	r30, 0x32	; 50
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	62 e0       	ldi	r22, 0x02	; 2
    2ac4:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_VidSetPortDirection>
 		UART_VidInit(ASYNC_NORM_BAUD, 9600);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	40 e8       	ldi	r20, 0x80	; 128
    2acc:	55 e2       	ldi	r21, 0x25	; 37
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <UART_VidInit>
		while(1){
 			LM35_VidRead(&temp);
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	41 96       	adiw	r24, 0x11	; 17
    2ada:	0e 94 13 08 	call	0x1026	; 0x1026 <LM35_VidRead>
 			t=(u16)temp;
    2ade:	89 89       	ldd	r24, Y+17	; 0x11
    2ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae2:	ab 89       	ldd	r26, Y+19	; 0x13
    2ae4:	bc 89       	ldd	r27, Y+20	; 0x14
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	98 8b       	std	Y+16, r25	; 0x10
    2af4:	8f 87       	std	Y+15, r24	; 0x0f
 			Num_Send_TTL(t);
    2af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af8:	98 89       	ldd	r25, Y+16	; 0x10
    2afa:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Num_Send_TTL>
 			UART_VidSend('C');
    2afe:	83 e4       	ldi	r24, 0x43	; 67
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_VidSend>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	aa e7       	ldi	r26, 0x7A	; 122
    2b0c:	b4 e4       	ldi	r27, 0x44	; 68
    2b0e:	8b 87       	std	Y+11, r24	; 0x0b
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	ad 87       	std	Y+13, r26	; 0x0d
    2b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8f 83       	std	Y+7, r24	; 0x07
    2b30:	98 87       	std	Y+8, r25	; 0x08
    2b32:	a9 87       	std	Y+9, r26	; 0x09
    2b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <Display_tempTTL+0xb4>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <Display_tempTTL+0x132>
	else if (__tmp > 65535)
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <Display_tempTTL+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <Display_tempTTL+0x114>
    2b9a:	88 ec       	ldi	r24, 0xC8	; 200
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <Display_tempTTL+0x102>
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <Display_tempTTL+0xf6>
    2bc0:	8a cf       	rjmp	.-236    	; 0x2ad6 <Display_tempTTL+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <Display_tempTTL+0x13e>
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	75 cf       	rjmp	.-278    	; 0x2ad6 <Display_tempTTL+0x32>

00002bec <Uart>:
 			_delay_ms(1000);

		}
}
void Uart() {
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	60 97       	sbiw	r28, 0x10	; 16
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
	u16 x = 5;
    2c00:	85 e0       	ldi	r24, 0x05	; 5
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	98 8b       	std	Y+16, r25	; 0x10
    2c06:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPortDirection(PORTD, 0x02);
    2c08:	e2 e3       	ldi	r30, 0x32	; 50
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	62 e0       	ldi	r22, 0x02	; 2
    2c10:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_VidSetPortDirection>
	UART_VidInit(ASYNC_NORM_BAUD, 9600);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	55 e2       	ldi	r21, 0x25	; 37
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <UART_VidInit>
	while (1) {

		// x=UART_VidReceive();
		UART_VidSend(5+48);
    2c22:	85 e3       	ldi	r24, 0x35	; 53
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_VidSend>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	aa e7       	ldi	r26, 0x7A	; 122
    2c30:	b4 e4       	ldi	r27, 0x44	; 68
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	ad 87       	std	Y+13, r26	; 0x0d
    2c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a ef       	ldi	r20, 0xFA	; 250
    2c48:	54 e4       	ldi	r21, 0x44	; 68
    2c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8f 83       	std	Y+7, r24	; 0x07
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	a9 87       	std	Y+9, r26	; 0x09
    2c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <Uart+0x90>
		__ticks = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <Uart+0x10e>
	else if (__tmp > 65535)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	4c f5       	brge	.+82     	; 0x2ce6 <Uart+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <Uart+0xf0>
    2cbe:	88 ec       	ldi	r24, 0xC8	; 200
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <Uart+0xde>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <Uart+0xd2>
    2ce4:	9e cf       	rjmp	.-196    	; 0x2c22 <Uart+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <Uart+0x11a>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	89 cf       	rjmp	.-238    	; 0x2c22 <Uart+0x36>

00002d10 <main>:
		}*/
	}
}

int main()
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62

Display_tempTTL();
    2d18:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Display_tempTTL>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
 }
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <__mulsi3>:
    2d26:	62 9f       	mul	r22, r18
    2d28:	d0 01       	movw	r26, r0
    2d2a:	73 9f       	mul	r23, r19
    2d2c:	f0 01       	movw	r30, r0
    2d2e:	82 9f       	mul	r24, r18
    2d30:	e0 0d       	add	r30, r0
    2d32:	f1 1d       	adc	r31, r1
    2d34:	64 9f       	mul	r22, r20
    2d36:	e0 0d       	add	r30, r0
    2d38:	f1 1d       	adc	r31, r1
    2d3a:	92 9f       	mul	r25, r18
    2d3c:	f0 0d       	add	r31, r0
    2d3e:	83 9f       	mul	r24, r19
    2d40:	f0 0d       	add	r31, r0
    2d42:	74 9f       	mul	r23, r20
    2d44:	f0 0d       	add	r31, r0
    2d46:	65 9f       	mul	r22, r21
    2d48:	f0 0d       	add	r31, r0
    2d4a:	99 27       	eor	r25, r25
    2d4c:	72 9f       	mul	r23, r18
    2d4e:	b0 0d       	add	r27, r0
    2d50:	e1 1d       	adc	r30, r1
    2d52:	f9 1f       	adc	r31, r25
    2d54:	63 9f       	mul	r22, r19
    2d56:	b0 0d       	add	r27, r0
    2d58:	e1 1d       	adc	r30, r1
    2d5a:	f9 1f       	adc	r31, r25
    2d5c:	bd 01       	movw	r22, r26
    2d5e:	cf 01       	movw	r24, r30
    2d60:	11 24       	eor	r1, r1
    2d62:	08 95       	ret

00002d64 <__udivmodhi4>:
    2d64:	aa 1b       	sub	r26, r26
    2d66:	bb 1b       	sub	r27, r27
    2d68:	51 e1       	ldi	r21, 0x11	; 17
    2d6a:	07 c0       	rjmp	.+14     	; 0x2d7a <__udivmodhi4_ep>

00002d6c <__udivmodhi4_loop>:
    2d6c:	aa 1f       	adc	r26, r26
    2d6e:	bb 1f       	adc	r27, r27
    2d70:	a6 17       	cp	r26, r22
    2d72:	b7 07       	cpc	r27, r23
    2d74:	10 f0       	brcs	.+4      	; 0x2d7a <__udivmodhi4_ep>
    2d76:	a6 1b       	sub	r26, r22
    2d78:	b7 0b       	sbc	r27, r23

00002d7a <__udivmodhi4_ep>:
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	5a 95       	dec	r21
    2d80:	a9 f7       	brne	.-22     	; 0x2d6c <__udivmodhi4_loop>
    2d82:	80 95       	com	r24
    2d84:	90 95       	com	r25
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	08 95       	ret

00002d8c <__udivmodsi4>:
    2d8c:	a1 e2       	ldi	r26, 0x21	; 33
    2d8e:	1a 2e       	mov	r1, r26
    2d90:	aa 1b       	sub	r26, r26
    2d92:	bb 1b       	sub	r27, r27
    2d94:	fd 01       	movw	r30, r26
    2d96:	0d c0       	rjmp	.+26     	; 0x2db2 <__udivmodsi4_ep>

00002d98 <__udivmodsi4_loop>:
    2d98:	aa 1f       	adc	r26, r26
    2d9a:	bb 1f       	adc	r27, r27
    2d9c:	ee 1f       	adc	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	a2 17       	cp	r26, r18
    2da2:	b3 07       	cpc	r27, r19
    2da4:	e4 07       	cpc	r30, r20
    2da6:	f5 07       	cpc	r31, r21
    2da8:	20 f0       	brcs	.+8      	; 0x2db2 <__udivmodsi4_ep>
    2daa:	a2 1b       	sub	r26, r18
    2dac:	b3 0b       	sbc	r27, r19
    2dae:	e4 0b       	sbc	r30, r20
    2db0:	f5 0b       	sbc	r31, r21

00002db2 <__udivmodsi4_ep>:
    2db2:	66 1f       	adc	r22, r22
    2db4:	77 1f       	adc	r23, r23
    2db6:	88 1f       	adc	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	1a 94       	dec	r1
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <__udivmodsi4_loop>
    2dbe:	60 95       	com	r22
    2dc0:	70 95       	com	r23
    2dc2:	80 95       	com	r24
    2dc4:	90 95       	com	r25
    2dc6:	9b 01       	movw	r18, r22
    2dc8:	ac 01       	movw	r20, r24
    2dca:	bd 01       	movw	r22, r26
    2dcc:	cf 01       	movw	r24, r30
    2dce:	08 95       	ret

00002dd0 <__prologue_saves__>:
    2dd0:	2f 92       	push	r2
    2dd2:	3f 92       	push	r3
    2dd4:	4f 92       	push	r4
    2dd6:	5f 92       	push	r5
    2dd8:	6f 92       	push	r6
    2dda:	7f 92       	push	r7
    2ddc:	8f 92       	push	r8
    2dde:	9f 92       	push	r9
    2de0:	af 92       	push	r10
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	ca 1b       	sub	r28, r26
    2dfa:	db 0b       	sbc	r29, r27
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	09 94       	ijmp

00002e08 <__epilogue_restores__>:
    2e08:	2a 88       	ldd	r2, Y+18	; 0x12
    2e0a:	39 88       	ldd	r3, Y+17	; 0x11
    2e0c:	48 88       	ldd	r4, Y+16	; 0x10
    2e0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e10:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e12:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e14:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e16:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e18:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e1a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e1c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e1e:	df 80       	ldd	r13, Y+7	; 0x07
    2e20:	ee 80       	ldd	r14, Y+6	; 0x06
    2e22:	fd 80       	ldd	r15, Y+5	; 0x05
    2e24:	0c 81       	ldd	r16, Y+4	; 0x04
    2e26:	1b 81       	ldd	r17, Y+3	; 0x03
    2e28:	aa 81       	ldd	r26, Y+2	; 0x02
    2e2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e2c:	ce 0f       	add	r28, r30
    2e2e:	d1 1d       	adc	r29, r1
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	ed 01       	movw	r28, r26
    2e3c:	08 95       	ret

00002e3e <ceil>:
    2e3e:	3b d0       	rcall	.+118    	; 0x2eb6 <__fp_trunc>
    2e40:	80 f0       	brcs	.+32     	; 0x2e62 <ceil+0x24>
    2e42:	9f 37       	cpi	r25, 0x7F	; 127
    2e44:	40 f4       	brcc	.+16     	; 0x2e56 <ceil+0x18>
    2e46:	91 11       	cpse	r25, r1
    2e48:	0e f4       	brtc	.+2      	; 0x2e4c <ceil+0xe>
    2e4a:	4d c0       	rjmp	.+154    	; 0x2ee6 <__fp_szero>
    2e4c:	60 e0       	ldi	r22, 0x00	; 0
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	80 e8       	ldi	r24, 0x80	; 128
    2e52:	9f e3       	ldi	r25, 0x3F	; 63
    2e54:	08 95       	ret
    2e56:	26 f0       	brts	.+8      	; 0x2e60 <ceil+0x22>
    2e58:	1b 16       	cp	r1, r27
    2e5a:	61 1d       	adc	r22, r1
    2e5c:	71 1d       	adc	r23, r1
    2e5e:	81 1d       	adc	r24, r1
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <__fp_mintl>
    2e62:	1b c0       	rjmp	.+54     	; 0x2e9a <__fp_mpack>

00002e64 <__fp_mintl>:
    2e64:	88 23       	and	r24, r24
    2e66:	71 f4       	brne	.+28     	; 0x2e84 <__fp_mintl+0x20>
    2e68:	77 23       	and	r23, r23
    2e6a:	21 f0       	breq	.+8      	; 0x2e74 <__fp_mintl+0x10>
    2e6c:	98 50       	subi	r25, 0x08	; 8
    2e6e:	87 2b       	or	r24, r23
    2e70:	76 2f       	mov	r23, r22
    2e72:	07 c0       	rjmp	.+14     	; 0x2e82 <__fp_mintl+0x1e>
    2e74:	66 23       	and	r22, r22
    2e76:	11 f4       	brne	.+4      	; 0x2e7c <__fp_mintl+0x18>
    2e78:	99 27       	eor	r25, r25
    2e7a:	0d c0       	rjmp	.+26     	; 0x2e96 <__fp_mintl+0x32>
    2e7c:	90 51       	subi	r25, 0x10	; 16
    2e7e:	86 2b       	or	r24, r22
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	2a f0       	brmi	.+10     	; 0x2e90 <__fp_mintl+0x2c>
    2e86:	9a 95       	dec	r25
    2e88:	66 0f       	add	r22, r22
    2e8a:	77 1f       	adc	r23, r23
    2e8c:	88 1f       	adc	r24, r24
    2e8e:	da f7       	brpl	.-10     	; 0x2e86 <__fp_mintl+0x22>
    2e90:	88 0f       	add	r24, r24
    2e92:	96 95       	lsr	r25
    2e94:	87 95       	ror	r24
    2e96:	97 f9       	bld	r25, 7
    2e98:	08 95       	ret

00002e9a <__fp_mpack>:
    2e9a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e9c:	31 f0       	breq	.+12     	; 0x2eaa <__fp_mpack_finite+0xc>

00002e9e <__fp_mpack_finite>:
    2e9e:	91 50       	subi	r25, 0x01	; 1
    2ea0:	20 f4       	brcc	.+8      	; 0x2eaa <__fp_mpack_finite+0xc>
    2ea2:	87 95       	ror	r24
    2ea4:	77 95       	ror	r23
    2ea6:	67 95       	ror	r22
    2ea8:	b7 95       	ror	r27
    2eaa:	88 0f       	add	r24, r24
    2eac:	91 1d       	adc	r25, r1
    2eae:	96 95       	lsr	r25
    2eb0:	87 95       	ror	r24
    2eb2:	97 f9       	bld	r25, 7
    2eb4:	08 95       	ret

00002eb6 <__fp_trunc>:
    2eb6:	25 d0       	rcall	.+74     	; 0x2f02 <__fp_splitA>
    2eb8:	a0 f0       	brcs	.+40     	; 0x2ee2 <__fp_trunc+0x2c>
    2eba:	be e7       	ldi	r27, 0x7E	; 126
    2ebc:	b9 17       	cp	r27, r25
    2ebe:	88 f4       	brcc	.+34     	; 0x2ee2 <__fp_trunc+0x2c>
    2ec0:	bb 27       	eor	r27, r27
    2ec2:	9f 38       	cpi	r25, 0x8F	; 143
    2ec4:	60 f4       	brcc	.+24     	; 0x2ede <__fp_trunc+0x28>
    2ec6:	16 16       	cp	r1, r22
    2ec8:	b1 1d       	adc	r27, r1
    2eca:	67 2f       	mov	r22, r23
    2ecc:	78 2f       	mov	r23, r24
    2ece:	88 27       	eor	r24, r24
    2ed0:	98 5f       	subi	r25, 0xF8	; 248
    2ed2:	f7 cf       	rjmp	.-18     	; 0x2ec2 <__fp_trunc+0xc>
    2ed4:	86 95       	lsr	r24
    2ed6:	77 95       	ror	r23
    2ed8:	67 95       	ror	r22
    2eda:	b1 1d       	adc	r27, r1
    2edc:	93 95       	inc	r25
    2ede:	96 39       	cpi	r25, 0x96	; 150
    2ee0:	c8 f3       	brcs	.-14     	; 0x2ed4 <__fp_trunc+0x1e>
    2ee2:	08 95       	ret

00002ee4 <__fp_zero>:
    2ee4:	e8 94       	clt

00002ee6 <__fp_szero>:
    2ee6:	bb 27       	eor	r27, r27
    2ee8:	66 27       	eor	r22, r22
    2eea:	77 27       	eor	r23, r23
    2eec:	cb 01       	movw	r24, r22
    2eee:	97 f9       	bld	r25, 7
    2ef0:	08 95       	ret

00002ef2 <__fp_split3>:
    2ef2:	57 fd       	sbrc	r21, 7
    2ef4:	90 58       	subi	r25, 0x80	; 128
    2ef6:	44 0f       	add	r20, r20
    2ef8:	55 1f       	adc	r21, r21
    2efa:	59 f0       	breq	.+22     	; 0x2f12 <__fp_splitA+0x10>
    2efc:	5f 3f       	cpi	r21, 0xFF	; 255
    2efe:	71 f0       	breq	.+28     	; 0x2f1c <__fp_splitA+0x1a>
    2f00:	47 95       	ror	r20

00002f02 <__fp_splitA>:
    2f02:	88 0f       	add	r24, r24
    2f04:	97 fb       	bst	r25, 7
    2f06:	99 1f       	adc	r25, r25
    2f08:	61 f0       	breq	.+24     	; 0x2f22 <__fp_splitA+0x20>
    2f0a:	9f 3f       	cpi	r25, 0xFF	; 255
    2f0c:	79 f0       	breq	.+30     	; 0x2f2c <__fp_splitA+0x2a>
    2f0e:	87 95       	ror	r24
    2f10:	08 95       	ret
    2f12:	12 16       	cp	r1, r18
    2f14:	13 06       	cpc	r1, r19
    2f16:	14 06       	cpc	r1, r20
    2f18:	55 1f       	adc	r21, r21
    2f1a:	f2 cf       	rjmp	.-28     	; 0x2f00 <__fp_split3+0xe>
    2f1c:	46 95       	lsr	r20
    2f1e:	f1 df       	rcall	.-30     	; 0x2f02 <__fp_splitA>
    2f20:	08 c0       	rjmp	.+16     	; 0x2f32 <__fp_splitA+0x30>
    2f22:	16 16       	cp	r1, r22
    2f24:	17 06       	cpc	r1, r23
    2f26:	18 06       	cpc	r1, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	f1 cf       	rjmp	.-30     	; 0x2f0e <__fp_splitA+0xc>
    2f2c:	86 95       	lsr	r24
    2f2e:	71 05       	cpc	r23, r1
    2f30:	61 05       	cpc	r22, r1
    2f32:	08 94       	sec
    2f34:	08 95       	ret

00002f36 <_exit>:
    2f36:	f8 94       	cli

00002f38 <__stop_program>:
    2f38:	ff cf       	rjmp	.-2      	; 0x2f38 <__stop_program>
